openapi: 3.0.0
info:
  title: Memfault API Documentation
  description: >-
    # About


    This is the documentation for the Memfault REST API.


    **For CI & scripting, we recommend using the** [<b>Memfault CLI Tool</b>]()
    **which exposes an easy to use interface for a majority of the REST APIs
    detailed below.**


    Linked below are other useful resources:


    - [Firmware SDK Documentation]()

    - [Guide: Data From Firmware To The Cloud]()

    - [Memfault Keyword Terminology]()
        

    # Memfault URL's


    There are four API related URL's that will be used with Memfault's service.
    The  

    proper use for each is as follows:


    - `api.memfault.com` - Use along with an API Key for normal consumption and
    use  
        of the API documented below.
    - `chunks.memfault.com` - Use with the **Chunks** API to push chunked data
    into  
        Memfault.
    - `ingress.memfault.com` - Use with API's that push data into Memfault, such
    as  
        **Events** and **Coredumps**.
    - `files.memfault.com` - Use in Continuous Integration systems for
    uploading  
        large files, such as binaries, symbol files, bugreports, etc.
        

    # Authentication


    There are four ways to authenticate when interfacing with the Memfault API.


    ## Email + Password


    To test if the Email + Password works, one can try this example request


    ```

    curl --user user@example.com:mypassword https://api.memfault.com/auth/me

     ```

    where `user@example.com` is the User's email and `mypassword` is the
    User's  

    _password_


    ## Email + API Key


    Please refer to the section 'Auth -> Generate User API Key' to learn how to
    get  

    an API key. Once one is generated, the user can authenticate with the email
    +  

    API key combination using Basic Auth


    To test if the Email + API Key works, one can try this example request


    ```

    curl --user user@example.com:123e4567e89b12d3a456426655440000
    https://api.memfault.com/auth/me

     ```

    where `user@example.com` is the User's email and  

    `123e4567e89b12d3a456426655440000` is the User's _API Key_


    ## Organization Auth Token


    Organization Auth Tokens allow access of the organization's resources for
    automation. They can be accessed and managed by Administrators at Admin â†’
    Organization Auth Tokens in the Memfault UI.


    To test if the Organization Auth Token works, one can try this example
    request


    ```

    curl --user ":123e4567e89b12d3a456426655440000"
    https://api.memfault.com/api/v0/organizations

     ```

    ## Memfault Project Key


    This is only for use when pushing data into Memfault, or by a **Device**
    that  

    may have limited memory when accessing specific endpoints (such as the
    Latest  

    Release endpoint).


    > This sort of authentication **will not** work with most API endpoints.
    API  

    endpoints that accept or require this form of authentication will
    explicitly  

    say so in their specific documentation. 
      

    This enables **Devices** to associate directly to a **Project** instead of
    with  

    a particular _User_, Memfault account, or API Key. It also allows for a
    shorter  

    URL which doesn't have to specify the **Project** or **Organization**.  

    **Devices** can make requests such as:


    ```

    curl \
      https://ingress.memfault.com/api/v0/events
      --header "Memfault-Project-Key: 06e7916f2db44167a1f5196cfe83a898"
      --header 'Content-Type: application/json' \
      --data '{ ... }'

     ```

    The Memfault Project Key for a **Project** can be found in the Dashboard
    under  

    _Settings_.


    # Requests


    All API data sent and received is [JSON]().


    All request must have the `Host` header set or else a `400 Bad Request`
    response  

    will be returned.


    ## Methods


    | Method | Example Route | Count | Description |

    | --- | --- | --- | --- |

    | `GET` | `/objects` | many | Get a list of the objects |

    | `GET` | `/objects/:key` | single | Get a single object |

    | `POST` | `/objects` | single | Create a single object |

    | `PATCH` | `/objects/:key` | single | Update any number of fields in an
    object |

    | `PUT` | `/objects/:key` | single | Create/Update a relationship object |

    | `DELETE` | `/objects` | many | Delete many objects (sent as JSON data) |

    | `DELETE` | `/objects/:key` | single | Delete a single object |


    > NOTE: Not all routes implemented for all types. Please reference the  

    documentation for exact routes and features 
      

    ## Parameters


    Most endpoints with methods of type `POST`, `PATCH`, and `PUT` will accept  

    parameters and data in JSON format.


    Header: `Content-Type: application/json`


    ## Query Parameters & Filtering


    Many API endpoints allow filtering of the results through the use of query  

    parameters. These are optional and URL encoded. The list of possible
    parameters  

    are listed under each route. Many of them accept list of values, in the  

    following format:


    ex. single **Cohort**


    ```

    /issues?cohort=alpha

     ```

    ex. List of **Cohorts**


    ```

    /issues?cohort=alpha&cohort=beta&cohort=internal

     ```

    Query Parameters that accept lists are denoted by the `[]` signifier after
    their  

    name in the documentation for each endpoint. ex. `cohorts[]`


    ## Sorting


    For all `sort` parameters, you may include `-` to force _Descending_ sort,
    or  

    leave it off to force _Ascending_ sort.


    The following will sort by `created_date` descending, with the newest
    entries  

    last.


    `/projects?sort=-created_date`


    The following will sort by `created_date` ascending, with the newest
    entries  

    first.


    `/projects?sort=created_date`


    ## Pagination


    Pagination works on every endpoint, and the following parameters can be
    passed  

    in to manipulate the page and size of each request.


    | Query String Parameter | Required | Description |

    | --- | --- | --- |

    | page | optional | Page number of the result set (default: 1) |

    | per_page | optional | Limit the number of results per page. (default: 100,
    max: 100) |


    Example:


    ```

    curl -X GET
    "https://app.memfault.com/api/v0/organizations/memfault/projects/demo/events?per_page=10&page=2"

     ```

    ## Sorting


    For all `sort` parameters, you may include `-` to force _Descending_ sort,
    or  

    leave it off to force _Ascending_ sort.


    The following will sort by `created_date` descending, with the newest
    entries  

    last.


    `/projects?sort=-created_date`


    The following will sort by `created_date` ascending, with the newest
    entries  

    first.


    `/projects?sort=created_date`


    ## Versions


    All _Versions_ are required to be [Semantic Versions](). If  

    this is a problem, let us know!


    # Responses


    ## Pagination


    On responses where multiple items could be returned, a `paging` field in
    the  

    JSON object is returned.


    ```

    {
      "data": {
        ...
      }
      "paging": {
        "item_count": 35,
        "page": 1,
        "page_count": 1,
        "per_page": 100,
        "total_count": 35
      }
    }

     ```

    | Field | Type | Description |

    | --- | --- | --- |

    | `item_count` | `Number` | Number of items return in this response |

    | `total_count` | `Number` | Number of items total on server that could be
    returned |

    | `page` | `Number` | The current page number |

    | `page_count` | `Number` | The number of pages that could be returned from
    the server |

    | `per_page` | `Number` | The maximum number of items that will be returned
    in a response |


    ## Schema


    Timestamps are returning in [ISO 8601]()  

    format.


    `2014-12-22T03:12:58.019077+00:00`


    # Memfault Resources


    The following is a table of all Memfault Resources and their identifiers,
    URI's,  

    and notes about each of them.


    | Resource | Identifier Type | API URI | Notes |

    | --- | --- | --- | --- |

    | Organization | `slug` | `/organizations/` | Max Length: 128  <br>Regex:
    `[-a-zA-Z0-9_]+` |

    | Project | `slug` | `/organizations//projects/` | Max Length: 128 
    <br>Regex: `[-a-zA-Z0-9_]+` |

    | Software Type | `slug` | `/organizations//projects/``/software_types/` |
    Max Length: 128  <br>Regex: `[-a-zA-Z0-9_\.\+]+` |

    | Software Version | `slug` |
    `/organizations//projects/``/software_types//software_versions/` | Max
    Length: 128  <br>Regex: `[-a-zA-Z0-9_\.\+]+` |

    | Cohort | `slug` | `/organizations//projects/``/cohorts/` | Max Length:
    128  <br>Regex: `[-a-zA-Z0-9_]+` |

    | Device | `slug` | `/organizations//projects/``/devices/` | Max Length:
    128  <br>Regex: `[-a-zA-Z0-9_]+` |

    | HardwareVersion | `slug` | N/A | Max Length: 128  <br>Regex:
    `[-a-zA-Z0-9_\.\+]+` |

    | Deployment | `id` | `/organizations//projects/``/deployments/` |  |

    | Event | `id` | `/organizations//projects/``/events/` |  |

    | Trace | `id` | `/organizations//projects/``/traces/` |  |

    | Issue | `id` | `/organizations//projects/``/issues/` |  |
  version: 1.0.0
servers:
  - url: http://{{server}}
  - url: http://{{chunks_server}}
  - url: http://{{files_server}}
  - url: http://{{ingress_server}}
components:
  securitySchemes:
    noauthAuth:
      type: http
      scheme: noauth
    basicAuth:
      type: http
      scheme: basic
security:
  - basicAuth: []
tags:
  - name: Auth
    description: >-
      Routes handling Authentication with the Memfault service


      A **User** has a registered account on Memfault. A **User** is a member of
      different **Organizations**,

      which grant them permission to **Organization's** **Projects**.


      ### Schema


      ```

      {
        "id": 1,
        "created_date": "2019-01-19T05:01:13.000000+00:00",
        "updated_date": "2019-01-19T05:01:13.000000+00:00",
        "email": "user@example.com"
      }

      ```
  - name: Projects
    description: >-
      A **Project** is the next largest construct after **Organization**. It
      contains

      **Devices**, **Software Types**, **Events**, **Issues**, **Deployments**,
      etc.


      ### Route Parameters


      > The **Project** `slug` should be used whenever referencing a **Project**
      in an

      > API or URL.


      ### Request Schema


      | Field                   | Type     |
      Description                                                     |

      |-------------------------|----------|-----------------------------------------------------------------|

      | `name` <br>**Required** | `String` | Name of the **Project**
      <br>Example: `"Awesome Project"`        |

      | `slug` <br>**Required** | `String` | A _unique_ URL compatible slug
      <br>Example: `"awesome-project"` |

      | `platform`              | `String` | The platform of the **Project**
      <br>Example: `nRF5x`            |

      | `os`                    | `String` | The operating system of the
      **Project** <br>Example: `FreeRTOS` |


      ### Query Parameters


      The following parameters can be used to filter **Projects**.


      | Query Parameter | Type       |
      Description                                                   |

      |-----------------|------------|---------------------------------------------------------------|

      | `name`          | `String[]` | Name of the **Project** <br>Example:
      `"Awesome%20Project"`    |

      | `platform`      | `String[]` | Platform of the **Project** <br>Example:
      `"nRF5x"`            |

      | `os`            | `String[]` | Operating System of the **Project**
      <br>Example: `"FreeRTOS"` |


      | Sort Parameter | Type       | Description  |

      |----------------|------------|--------------|

      | `created_date` | `DateTime` | Date created |


      ### Response Schema


      ```JSON

      {
        "data": {
          "id": 1,
          "created_date": "2019-01-19T05:01:13.000000+00:00",
          "updated_date": "2019-01-19T05:01:13.000000+00:00",
          "name": "Awesome Project",
          "slug": "awesome-project",
          "platform": "nRF5x",
          "os": "FreeRTOS",
          "api_key": "87c2ca9d3ec148ac82034fc2724ff614",
        }
      }

      ```
  - name: Chunks
    description: >
      The **Chunks** endpoint works together with the [Memfault Firmware
      SDK](https://github.com/memfault/memfault-firmware-sdk). 

      It provides a streamlined way of getting arbitrary data (coredumps,
      events, heartbeats, etc.)

      out of devices and into Memfault.


      Check out [the conceptual documentation](https://mflt.io/2MGMoIl) to learn
      more.
  - name: Cohorts
    description: >-
      A **Cohort** is a collection of **Devices**. Typically used to logically
      group **Devices** by customer, building, location, priority, etc.


      ### Route Parameters


      > The **Cohort** `slug` should be used whenever referencing a **Cohort**
      in an

      > API or URL.


      ### Request Schema


      | Field                   | Type     |
      Description                                          |

      |-------------------------|----------|------------------------------------------------------|

      | `name` <br>**Required** | `String` | Name of the **Cohort** <br>Example:
      `"Beta Channel"` |

      | `slug`                  | `String` | Slug of the **Cohort** <br>Example:
      `"beta"`         |


      ### Query Parameters


      The following parameters can be used to filter **Cohorts**.


      | Query Parameter | Type       |
      Description                                            |

      |-----------------|------------|--------------------------------------------------------|

      | `name`          | `String[]` | Name of the **Cohort** <br>Example:
      `"Beta%20Channel"` |

      | `slug`          | `String[]` | Slug for the **Cohort** <br>Example:
      `"beta"`          |

      | `sort`          | `String`   | Sort keys (listed below) <br>Example:
      `-created_date`  |


      ### Sort Parameters


      | Sort Parameter | Type       | Description                 |

      |----------------|------------|-----------------------------|

      | `created_date` | `DateTime` | Date the object was created |


      ### Response Schema


      ```JSON

      {
        "data": {
          "id": 2,
          "created_date": "2019-01-19T05:01:13.000000+00:00",
          "updated_date": "2019-01-19T05:01:13.000000+00:00",
          "name": "Production",
          "slug": "prod",
          "count_devices": 24
        }
      }

      ```
  - name: Devices
    description: >-
      A **Device** is a unit in the field, e.g. A smartwatch built by a company
      and

      purchased by a customer.


      ### Route Parameters


      > The **Device** `device_serial` should be used whenever referencing a

      > **Device** in an API or URL.


      ### Request Schema


      | Field                               | Type     |
      Description                                                                                                                    
      |

      |-------------------------------------|----------|---------------------------------------------------------------------------------------------------------------------------------|

      | `device_serial` <br>**Required**    | `String` | A unique identifier for
      a **Device**. Usually a serial number, MAC address, etc. <br>Example:
      `"ABCD1234"`                      |

      | `hardware_version` <br>**Required** | `String` | _Hardware Version_ for
      the **Device**. Different _Hardware Versions_ will have different
      **Artifacts**. <br>Example: `"hwrev1"` |

      | `cohort`                            | `String` | **Cohort** slug that
      the **Device** should be grouped into. <br>Example:
      `"beta"`                                               |

      | `nickname`                          | `String` | Can be used to provide
      a more human readable **Device** identifier <br>Example: `"Front Door
      Lock"`                             |

      | `description`                       | `String` | Long form description
      of the **Device**. <br>Example: `"Test device given to John for testing on
      January 1st."`                 |


      ### Query Parameters


      The following parameters can be used to filter **Devices**.


      | Query Parameter    | Type       |
      Description                                                                                             
      |

      |--------------------|------------|----------------------------------------------------------------------------------------------------------|

      | `last_seen_since`  | `DateTime` | _Last Seen_ timestamp is after this
      date <br>Example: `"2019-01-19T05:01:13.000000+00:00"`               |

      | `last_seen_until`  | `DateTime` | _Last Seen_ timestamp is before this
      date <br>Example: `"2019-01-19T05:01:13.000000+00:00"`              |

      | `hardware_version` | `String[]` | Hardware Versions <br>Example:
      `"hwrev1"`                                                               
      |

      | `sort`             | `String`   | Sort keys (listed below) <br>Example:
      `-deployed_date`                                                   |


      ### Sort Parameters


      | Sort Parameter | Type       | Description                       |

      |----------------|------------|-----------------------------------|

      | `last_seen`    | `DateTime` | Date the **Device** was last seen |


      ### Response Schema


      ```JSON

      {
        "data": {
          "id": 1,
          "created_date": "2019-01-19T05:01:13.000000+00:00",
          "updated_date": "2019-01-19T05:01:13.000000+00:00",
          "device_serial": "ABCD1234",
          "hardware_version": {
            "name": "xx_evt"
          },
          "nickname": "Front Door Lock",
          "description": "Test device given to John for testing on January 1st.",
          "first_seen": "2019-01-19T05:01:13.000000+00:00",
          "last_seen": "2019-01-19T05:01:13.000000+00:00",
          "cohort": {
            "id": 1,
            "name": "Beta Channel",
            "slug": "beta"
          },
          "last_seen_software_version": {
            "archived": false,
            "id": 37,
            "software_type": {
              "id": 18,
              "name": "xx_evt-software"
            },
          "version": "1.0.1"
          },
        }
      }

      ```
  - name: Software Types
    description: "> The **Software Type** `name` field should be used whenever referencing a\n> **Software Type** in an API or URL.\n\nA **Software Type** is a specific software package that runs on a **Device** in\na multi-component architecture.\n\nExample: If a toaster has two MCU's, one which is the main system MCU and the\nother handles Wi-Fi connections, then there would be two **Software Types**, one\nlikely called `main-fw` and the other called `wifi-fw`. A **Software Type** has\nmany **Software Versions** as updates are pushed to the **Device**.\n\n```\nâ”œâ”€â”€ main-fw     # Software Type\nâ”‚\_\_ â”œâ”€â”€ 1.0.0   # Software Version\nâ”‚\_\_ â”œâ”€â”€ 1.1.0\nâ”‚\_\_ â”œâ”€â”€ 1.1.1\n|   ...\nâ””â”€â”€ wifi-fw\n    â”œâ”€â”€ 11.0\n    â”œâ”€â”€ 12.0\n    â”œâ”€â”€ 12.1\n    ...\n```\n\n### Route Parameters\n\n> The **Software Type** `name` should be used whenever referencing a **Software\n> Type** in an API or URL.\n\n### Request Schema\n\n| Field                   | Type     | Description                                                       |\n|-------------------------|----------|-------------------------------------------------------------------|\n| `name` <br>**Required** | `String` | Slug-like name for the **Software Type** <br>Example: `\"main-fw\"` |\n\n### Query Parameters\n\nNone\n\n### Sort Parameters\n\nNone\n\n### Response Schema\n\n```JSON\n{\n  \"data\": {\n    \"id\": 2,\n    \"created_date\": \"1989-05-30T10:40:12+00:00\",\n    \"name\": \"wifi-fw\",\n    \"latest_software_version\": \"null\",\n    \"software_versions_count\": 0\n  }\n}\n```"
  - name: Software Versions
    description: >-
      > The **Software Version** `version` field should be used whenever
      referencing a

      > **Software Version** in an API or URL.


      A **Software Version** is a single release for a particular **Software
      Type**. A

      single **Software Version** is associated with _one_ Symbol **Software

      Artifact**.


      ### Request Schema


      | Field                      | Type     |
      Description                                                                       
      |

      | -------------------------- | -------- |
      ----------------------------------------------------------------------------------
      |

      | `version` <br>**Required** | `String` | Type of **Artifact**. Choices:
      `firmware`, `symbols`.                              |

      | `revision`                 | `String` | Commit reference or hash
      <br>Example: `"11d95ef20f7a048ce1da1a6891dd3e2f92c89d85"` |


      ### Query Parameters


      None


      ### Sort Parameters


      None


      ### Response Schema


      ```JSON

      {
        "data": {
        "id": 1,
          "created_date": "1989-05-30T10:40:12+00:00",
          "updated_date": "1989-05-30T10:40:12+00:00",
          "build_id": "ddc0eb14f4ae541123436a2068aaea06aff2c523",
          "revision": "11d95ef20f7a048ce1da1a6891dd3e2f92c89d85",
          "version": "1.0.0",
          "artifacts": [],
        }
      }

      ```
  - name: Symbol Files
    description: >-
      > NOTE: To upload symbols for an embedded project, please use the
      **Software

      > Artifacts** API.


      The `*/symbols*` endpoints can be used to upload symbol files for Android

      Projects. These types of **Symbol Files** are currently accepted:


      - ELF binaries from either the MCU projects or Android/AOSP projects or
      from Android apps that contain native components
        (`.so` files).
      - R8 / ProGuard mapping files


      Also see the [detailed, step-by-step guide on uploading Android
      Symbols](https://mflt.io/34PvTBz).
  - name: Trace Import
    description: >-
      The [Trace Import
      endpoint](https://api-docs.memfault.com/#cc4cf101-c8c3-400d-a4f0-57e19ee18864)
      lets you import crash trace data from arbitrary sources. Memfault will
      process the crash trace data into a **Trace**. Similar Traces are
      deduplicated and gathered in an **Issue**, just like with Traces from
      other sources, like coredumps, trace events, etc.
  - name: Events
    description: >-
      An **Event** is a message generated by a **Device**.


      ### Event Types


      | Event Type | Description |

      | --- | --- |

      | `heartbeat` | Contains useful hourly metrics and system vitals |

      | `trace` | A **Trace** event, which adheres to the structure below |


      ### Request Schema


      | Event Type | Type | Description |

      | --- | --- | --- |

      | `type`  <br>**Required** | `String` | What type of **Event** this is.
      One of the *Event Types* above  <br>Example: `"heartbeat.hourly"` |

      | `software_type`  <br>**Required** | `String` | The *name* of the
      **Software Type** sending the **Event**  <br>Example: `"main-fw"` |

      | `software_version`  <br>**Required** | `String` | The *version* of
      **Software Version** sending the **Event**  <br>Example: `"1.0.0"` |

      | `device_serial`  <br>**Required** | `String` | **Device** Unique
      Identifier (set by client)  <br>Example: `ABCD1234`  <br>Example:
      `"ABCD1234"` |

      | `hardware_version`  <br>**Required** | `String` | *Hardware Version* for
      the **Device**.  <br>Example: `"hwrev1"` |

      | `sdk_version`  <br>**Required** | `String` | Memfault SDK Version on the
      **Device**  <br>Example: `"0.5.0"` |

      | `captured_date` | `DateTime` | Date the device *captured* the event |

      | `event_info` | `JSON` | **Event** data. Exact schema is determined by
      the *Event Type* |

      | `user_info` | `JSON` | Extra data. Memfault won't process this data, but
      will store it along with the **Event** |


      ### Event Info Payloads


      The following structures are the only valid objects that are allowed in
      the  

      `event_info` object of an **Event**.


      #### Heartbeat Event


      A heartbeat is like the "pulse" of a **Device**. It reports the vitals of
      the  

      system, and gives Memfault an overview of what happened in the last hour.


      The key-value pairs sent in the `event_info.metrics` field are required to
      be in  

      `string:number` form. These *metrics* are parsed by Memfault and shown
      in  

      dashboards. These metrics can be anything...be creative!


      Some useful metrics to gather can include but are not limited to:


      *   Uptime

      *   Battery Percentage

      *   Bluetooth Bytes Sent/Received

      *   Wi-Fi Bytes Sent/Received

      *   Bluetooth Time Connected

      *   Heap Bytes Free/Allocated

      *   Time Asleep/Awake

      *   Flash Bytes Written/Read

      *   CPU/MCU Utilization
          

      It's also useful to record usage metrics of your devices. For example, if
      we  

      want to record metrics for a Parking Meter, we may also want to record
      the  

      number of user interactions or number of coins inserted to measure usage.


      | Field | Type | Description |

      | --- | --- | --- |

      | `metrics` | `Object[string:number]` | An object of a list of metrics as
      key:value pairs, where the key is a string and value is a number |


      ``` JSON

      {
        "type": "heartbeat",
        "software_type": "main-fw",
        "software_version": "1.0.0",
        "device_serial": "ABCD1234",
        "hardware_version": "hwrev1",
        "sdk_version": "0.5.0",
        "event_info": {
          "metrics": {
            "battery_pct": 77,
            "uptime_s": 17663,
            "heap_free_b": 1227
          }
        },
        "user_info": {
          "whatever": "you_want"
        }
      }


      ```


      #### Trace Event


      An **Event** that is generally recorded and associated with a crash,
      reset, or  

      assert. This event contains a micro-amount of data about the crash,
      usually on a  

      few registers and a **Trace** *Reason*. With just this information,
      Memfault can  

      group these events and surface **Issues**.


      > This is the smallest form of **Traces**. If you are looking for more
      detail  

      > about a particular type of crash, such as getting a full backtrace or
      a  

      > coredump of the system, Memfault can do that too. Please reach out!


      | Field | Type | Description |

      | --- | --- | --- |

      | `reason`  <br>**Required** | `Object[String:Number]` | The Trace Reason
      given by the **Device**  <br>Example: See Table Below for all possible
      values |

      | `pc`  <br>**Required** | `Number` | Register value of the PC (Program
      Counter) register at time of the **Trace**  <br>Example: 226689 |

      | `lr` | `Number` | Register value of the LR (Link Register) register at
      time of the **Trace**  <br>Example: 226574 |

      | `sp` | `Number` | Register value of the SP (Stack Pointer) register at
      time of the **Trace**  <br>Example: 6712 |


      ``` JSON

      {
        "type": "trace",
        "software_type": "main-fw",
        "software_version": "1.0.0",
        "device_serial": "ABCD1234",
        "hardware_version": "hwrev1",
        "sdk_version": "0.5.0",
        "event_info": {
          "reason": 32769,
          "pc": 226689,
          "lr": 226574,
          "sp": 6712
        },
        "user_info": {
          "whatever": "you_want"
        }
      }


      ```


      ##### Trace Reason


      | Reason Name | Value | Type | Notes |

      | --- | --- | --- | --- |

      | UNKNOWN | 0x0000 | Unknown |  |

      | USER_SHUTDOWN | 0x0001 | Normal |  |

      | USER_RESET | 0x0002 | Normal |  |

      | FW_UPDATE | 0x0003 | Normal |  |

      | LOW_POWER | 0x0004 | Normal |  |

      | ERROR_MASK | 0x8000 | Error | Every error below is masked against this
      value |

      | WDKWWDR | 0x8000 | Error | We Don't Know Why We Dangerously Rebooted 
      <br>[wdkwwdr.com](https://wdkwwdr.com) |

      | ASSERT | 0x8001 | Error |  |

      | WATCHDOG | 0x8002 | Error |  |

      | BUS_FAULT | 0x9100 | ARM: Bus Fault |  |

      | IBUSERR | 0x9101 | ARM: Bus Fault |  |

      | PRECISERR | 0x9102 | ARM: Bus Fault |  |

      | IMPRECISERR | 0x9103 | ARM: Bus Fault |  |

      | UNSTKERR | 0x9104 | ARM: Bus Fault |  |

      | STKERR | 0x9105 | ARM: Bus Fault |  |

      | LSPERR | 0x9106 | ARM: Bus Fault |  |

      | BFARVALID | 0x9107 | ARM: Bus Fault |  |

      | MEM_FAULT | 0x9200 | ARM: Memory Faults |  |

      | IACCVIOL | 0x9201 | ARM: Memory Faults |  |

      | DACCVIOL | 0x9202 | ARM: Memory Faults |  |

      | MUNSTKERR | 0x9203 | ARM: Memory Faults |  |

      | MSTKERR | 0x9204 | ARM: Memory Faults |  |

      | MLSPERR | 0x9205 | ARM: Memory Faults |  |

      | MMARVALID | 0x9206 | ARM: Memory Faults |  |

      | USAGE_FAULT | 0x9300 | ARM: Usage Faults |  |

      | UNDEFINSTR | 0x9301 | ARM: Usage Faults |  |

      | INVSTATE | 0x9302 | ARM: Usage Faults |  |

      | INVPC | 0x9303 | ARM: Usage Faults |  |

      | NOCP | 0x9304 | ARM: Usage Faults |  |

      | UNALIGNED | 0x9305 | ARM: Usage Faults |  |

      | DIVBYZERO | 0x9306 | ARM: Usage Faults |  |

      | HARD_FAULT | 0x9400 | ARM: Hard Faults |  |
  - name: Issues
    description: >-
      An **Issue** is a logical collection of _Trace_ **Events**. Each _Trace_

      **Event** that is received from a **device** has a unique _Signature_.
      These

      _Signatures_ are used to group **Events** into **Issues**.


      ### Request Schema


      No write access for **Issues** at the moment. They are automatically
      populated

      by sending **Traces** to the server.


      ### Query Parameters


      The following parameters can be used to filter **Issues**.


      | Query Parameter    | Type       |
      Description                                                                                                        
      |

      |--------------------|------------|---------------------------------------------------------------------------------------------------------------------|

      | `status`           | `String[]` | Status of the Issues to query for
      <br>Example:
      `status=open&status=resolved`                                        |

      | `title`            | `String`   | Search through the `title` field,
      using a basic search (where `*` is a wildcard) <br>Example:
      `*fault*`             |

      | `cohort`           | `String[]` | **Cohort** that the **Issues** appear
      with <br>Example:
      `cohort=beta`                                               |

      | `last_seen_since`  | `DateTime` | Last seen after this date <br>Example:
      `"2019-01-19T05:01:13.000000+00:00"`                                        
      |

      | `last_seen_until`  | `DateTime` | Last seen before this date
      <br>Example:
      `"2019-01-19T05:01:13.000000+00:00"`                                       
      |

      | `first_seen_since` | `DateTime` | First seen after this date
      <br>Example:
      `"2019-01-19T05:01:13.000000+00:00"`                                       
      |

      | `first_seen_until` | `DateTime` | First seen before this date
      <br>Example:
      `"2019-01-19T05:01:13.000000+00:00"`                                      
      |

      | `min_device_count` | `Number`   | Minimum numver of
      **Devices**                                                                                      
      |

      | `min_trace_count`  | `Number`   | Minimum number of
      occurrences                                                                                      
      |

      | `signature`        | `String[]` | List of signatures of the **Crash**
      <br>Example:
      `c7f929860131738beaed6dc626565ce1671d31a6e1e9fa3b90c28271e26610c9` |


      ### Sort Parameters


      | Sort Parameter | Type       |
      Description                                                                                    
      |

      |----------------|------------|-------------------------------------------------------------------------------------------------|

      | `last_seen`    | `DateTime` | Date the **Event** was received by
      Memfault                                                     |

      | `first_seen`   | `DateTime` | Date the **Event** was recorded on the
      **Device** <br>NOTE: will equal `received_date` if empty |

      | `device_count` | `Number`   | Number of unique **Devices** that have
      experienced this **Issue**                               |

      | `trace_count`  | `Number`   | Number of **Traces** that have been
      grouped with this **Issue**                                 |


      ### Response Schema


      ```JSON

      {
        "data": {
          "id": 1,
          "created_date": "2019-04-14T01:18:06.511100+00:00",
          "updated_date": "2019-04-14T01:18:06.541363+00:00",
          "status": "open",
          "title": "Assert at timeout_handler_exec",
          "message": "",
          "resolution": null,
          "signature": "c7f929860131738beaed6dc626565ce1671d31a6e1e9fa3b90c28271e26610c9",
          "counts": [
            5,
            12,
            15,
            15,
            4,
            7,
            4,
            10,
            15,
            10,
            10,
            13,
            9,
            15,
            6,
            4,
            10,
            3,
            9,
            9,
            12,
            15,
            15,
            3
          ],
          "device_count": 3,
          "trace_count": 3,
          "distribution": {
            "hardware_version": [
              {
                "count": 13,
                "version": "qq_pvt"
              },
              {
                "count": 9,
                "version": "xx_evt"
              }
            ],
            "sw_version": [
              {
                "count": 13,
                "version": "0.9"
              },
              {
                "count": 7,
                "version": "1.0.0"
              },
              {
                "count": 9,
                "version": "1.0.1"
              }
            ]
          },
          "first_seen": "2019-04-14T01:18:04.052556+00:00",
          "last_seen": "2019-04-14T01:18:04.055885+00:00",
          "first_release": {
            "id": 2,
            "version": "1.0.0",
            "revision": "4e57be871d1bd83d5d9592daf8e1d20c2fc66382"
          },
          "last_release": {
            "id": 2,
            "version": "1.0.0",
            "revision": "4e57be871d1bd83d5d9592daf8e1d20c2fc66382"
          },
          "last_trace": {
            "id": 3,
            "created_date": "2019-04-14T01:18:04.055867+00:00",
            "captured_date": "2019-04-14T01:18:04.055885+00:00",
            "received_date": "2019-04-14T01:18:04.055881+00:00",
            "title": "Assert at timeout_handler_exec",
            "message": "",
            "reason": "Assert",
            "signature": "c7f929860131738beaed6dc626565ce1671d31a6e1e9fa3b90c28271e26610c9",
            "context": "",
            "software_version": {
              "id": 1,
              "software_type": {
                "id": 1,
                "name": "main-fw"
              },
              "version": "1.0.0"
            },
            "device": {
              "device_serial": "FB11014FCE12616D",
              "hardware_version": "proto",
              "id": 43
            },
            "entries": {
              "faults": {
                "notes": [],
                "registers": [
                  {
                    "name": "CFSR",
                    "value": 0
                  },
                  {
                    "name": "HFSR",
                    "value": 0
                  },
                  {
                    "name": "SHCSR",
                    "value": 0
                  }
                ]
              },
              "threads": [
                {
                  "tid": 1,
                  "name": "Thread 1",
                  "current": false,
                  "crashed": false,
                  "reporting": false,
                  "registers": [
                    {
                      "name": "r0",
                      "value": 537122332
                    },
                    {
                      "name": "r1",
                      "value": 559170130
                    },
                    {
                      "name": "r2",
                      "value": 3758157060
                    },
                    {
                      "name": "r3",
                      "value": 2147485729
                    },
                    {
                      "name": "r4",
                      "value": 330
                    },
                    {
                      "name": "r5",
                      "value": 0
                    },
                    {
                      "name": "r6",
                      "value": 536895384
                    },
                    {
                      "name": "r7",
                      "value": 0
                    },
                    {
                      "name": "r8",
                      "value": 537122568
                    },
                    {
                      "name": "r9",
                      "value": 0
                    },
                    {
                      "name": "r10",
                      "value": 573785173
                    },
                    {
                      "name": "r11",
                      "value": 17
                    },
                    {
                      "name": "r12",
                      "value": 0
                    },
                    {
                      "name": "sp",
                      "value": 537122328
                    },
                    {
                      "name": "lr",
                      "value": 226689
                    },
                    {
                      "name": "pc",
                      "value": 226574
                    },
                    {
                      "name": "cpsr",
                      "value": 16777249
                    }
                  ],
                  "stacktrace": [
                    {
                      "address": 226574,
                      "arguments": {
                        "lr": "<optimized out>",
                        "pc": "<optimized out>",
                        "extra": "<optimized out>"
                      },
                      "context": [],
                      "file": "/Users/chrisc/dev/memfault/sdk/embedded/src/memfault_fault_handling.c",
                      "frame_size": 24,
                      "frame_type": "normal",
                      "function": "memfault_reboot_tracking_assert_handler",
                      "index": 0,
                      "lineno": 171,
                      "locals": {
                        "info": "{\n  reason = kMfltRebootReason_Assert, \n  pc = 159568, \n  lr = 180385\n}"
                      }
                    },
                    {
                      "address": 180384,
                      "arguments": {
                        "p_timer": "<optimized out>"
                      },
                      "context": [],
                      "file": "../nrf5_sdk/components/libraries/timer/app_timer.c",
                      "frame_size": 0,
                      "frame_type": "inline",
                      "function": "timeout_handler_exec",
                      "index": 1,
                      "lineno": 440,
                      "locals": {
                        "p_timer": "<optimized out>"
                      }
                    },
                    {
                      "address": 180384,
                      "arguments": null,
                      "context": [],
                      "file": "../nrf5_sdk/components/libraries/timer/app_timer.c",
                      "frame_size": 0,
                      "frame_type": "inline",
                      "function": "timer_timeouts_check",
                      "index": 2,
                      "lineno": 440,
                      "locals": {
                        "p_previous_timer": "<optimized out>",
                        "p_timer": "0x20005f98 <m_mflt_metric_log_timer_data>",
                        "ticks_elapsed": "0",
                        "ticks_expired": "330"
                      }
                    },
                    {
                      "address": 180384,
                      "arguments": null,
                      "context": [],
                      "file": "../nrf5_sdk/components/libraries/timer/app_timer.c",
                      "frame_size": 24,
                      "frame_type": "normal",
                      "function": "RTC1_IRQHandler",
                      "index": 3,
                      "lineno": 917,
                      "locals": null
                    },
                    {
                      "address": 4294967273,
                      "arguments": null,
                      "context": [],
                      "file": null,
                      "frame_size": 32,
                      "frame_type": "sigtramp",
                      "function": "<signal handler called>",
                      "index": 4,
                      "lineno": null,
                      "locals": null
                    },
                    {
                      "address": 89946,
                      "arguments": null,
                      "context": [],
                      "file": null,
                      "frame_size": 0,
                      "frame_type": "normal",
                      "function": null,
                      "index": 5,
                      "lineno": null,
                      "locals": null
                    },
                    {
                      "address": 89944,
                      "arguments": null,
                      "context": [],
                      "file": null,
                      "frame_type": "normal",
                      "function": null,
                      "index": 6,
                      "lineno": null,
                      "locals": null
                    }
                  ]
                }
              ]
            }
          }
        }
      }

      ```
  - name: Upload
    description: >-
      The Upload endpoints are used to upload files to the Memfault service.


      Uploading is a 3 step process to ensure scalability and reliability:


      1.  "Prepare" the file upload by making a `POST` request to
      `/api/v0/upload` to  
          obtain an `upload_url` and `token`. These will be used in subsequent requests.
      2.  Make a `PUT` request to the `upload_url` to upload the file.

      3.  Finally, "commit" the file upload by making a `POST` request with the
      `token` to the appropriate upload  
          processing API. 

          For example, after uploading an Android Bugreport file,  
          `POST` the `token` to `/api/v0/upload/bugreport`.
  - name: Releases
    description: >-
      A **Release** is a single revision or snapshot of your code that you
      eventually

      **Deploy** to a **Cohort**. A single **Release** object will contain many

      **Artifacts** which are binaries specific to a particular _Hardware
      Version_.


      ### Route Parameters


      > The **Release** `version` should be used whenever referencing a
      **Release** in

      > an API or URL.


      ### Request Schema


      | Field                      | Type      |
      Description                                                                                                                   
      |

      | -------------------------- | --------- |
      ------------------------------------------------------------------------------------------------------------------------------
      |

      | `version` <br>**Required** | `String`  | Short Version of the
      **Release** <br>Example:
      `"1.0.0"`                                                                       
      |

      | `min_version`              | `String`  | Short Version of the minimum
      required version to update to this **Release** <br>Example:
      `"1.0.0"`                             |

      | `revision`                 | `String`  | Commit reference or hash
      <br>Example:
      `"11d95ef20f7a048ce1da1a6891dd3e2f92c89d85"`                                            
      |

      | `notes`                    | `Text`    | Client provided notes (HTML,
      etc) about the release. Useful for Release Notes <br>Example:
      `"<ul><li>Fix bug #1234</li></ul>"` |

      | `extra_info`               | `JSON`    | Client provided metadata about
      the release <br>Example: `{"anything":
      "you_want"}`                                             |

      | `must_pass_through`        | `Boolean` | When the Release is deployed to
      a Cohort, forces a Device to update through this version <br>Example:
      `"true"`                 |

      | `is_forced`        | `Boolean` or `null` | Whether a Release is
      considered somehow critical and should be installed ASAP, for example a
      security update. A `null` value means that no active choice has been made
      for this release, for backwards compatibility. |


      ### Query Parameters


      The following parameters can be used to filter **Releases**.


      | Query Parameter | Type       |
      Description                                                                                                  
      |

      | --------------- | ---------- |
      -------------------------------------------------------------------------------------------------------------
      |

      | `revision`      | `String[]` | Revision (generally commit hash) of the
      **Release** <br>Example: `"11d95ef20f7a048ce1da1a6891dd3e2f92c89d85"` |

      | `version`       | `String[]` | Version string of the **Release**
      <br>Example:
      `1.0.0`                                                        |

      | `sort`          | `String`   | Sort keys (listed below) <br>Example:
      `-created_date`                                                         |


      ### Sort Parameters


      | Sort Parameter | Type       | Description                 |

      | -------------- | ---------- | --------------------------- |

      | `created_date` | `DateTime` | Date the object was created |


      ### Response Schema


      ```JSON

      {
        "data": {
          "id": 2,
          "created_date": "2019-01-19T05:01:13.000000+00:00",
          "updated_date": "2019-01-19T05:01:13.000000+00:00",
          "version": "1.0.0",
          "min_version": "1.0.0",
          "must_pass_through": "false",
          "revision": "11d95ef20f7a048ce1da1a6891dd3e2f92c89d85",
          "notes": "<h1>Release Notes</h1><ul><li>Fix bug #1234</li><li>New Feature XYX</li></ul>",
          "extra_info": {
            "anything": "you_want",
            "ci_system": "Jenkins",
            "build_system": "GNU Make",
            "build_time_s": 384
          },
          "count_devices": 47
        }
      }

      ```
  - name: Deployments (Preview)
    description: >-
      > NOTE: This API is a preview. Please contact us if this becomes an issue.


      A **Deployment** is a publish event of a **Release** to a **Cohort**.


      ### Request Schema


      | Field                               | Type     |
      Description                                                                                  
      |

      |-------------------------------------|----------|-----------------------------------------------------------------------------------------------|

      | `type` <br>**Required**             | `String` | `normal` or
      `staged_rollout` <br>Example:
      `"normal"`                                          |

      | `software_type` <br>**Required**    | `String` | **Software Type** name
      <br>Example: `"main-fw"`                                               |

      | `software_version` <br>**Required** | `String` | **Software Version**
      version <br>Example: `"1.0.0"`                                           |

      | `cohort` <br>**Required**           | `String` | **Cohort** Slug
      <br>Example:
      `"beta"`                                                         |

      | `extra_info`                        | `JSON`   | Extra data. Memfault
      won't process this data, but will store it along with the **Deployment** |


      ### Query Parameters


      The following parameters can be used to filter **Deployments**.


      | Query Parameter                      | Type       |
      Description                                                                
      |

      |--------------------------------------|------------|-----------------------------------------------------------------------------|

      | `software_type`                      | `String[]` | Names of **Software
      Types** <br>Example: `software_type=main-fw`            |

      | `software_version`                   | `String[]` | Versions of
      **Software Versions** <br>Example: `software_version=1.0.0`     |

      | `cohort`                             | `String[]` | Names of **Cohorts**
      <br>Example: `cohort=alpha&cohort=beta`                |

      | `since`                              | `DateTime` | Deployed after this
      date <br>Example: `"2019-01-19T05:01:13.000000+00:00"`  |

      | `until`                              | `DateTime` | Deployed before this
      date <br>Example: `"2019-01-19T05:01:13.000000+00:00"` |

      | `sort` <br>Default: `-deployed_date` | `String`   | Sort keys (listed
      below) <br>Example: `-deployed_date`                      |


      ### Sort Parameters


      | Sort Parameter  | Type       | Description                         |

      |-----------------|------------|-------------------------------------|

      | `deployed_date` | `DateTime` | Date the **Deployment** was created |


      ### Response Schema


      ```JSON

      {
        "data": {
          "id": 1,
          "created_date": "2019-01-19T05:01:13.000000+00:00",
          "updated_date": "2019-01-19T05:01:13.000000+00:00",
          "deployed_date": "2019-01-19T05:01:13.000000+00:00",
          "type": "staged_rollout",
          "status": "done",
          "rollout_percent": 100,
          "software_version": {
            "id": 1,
            "software_type": {
              "id": 1,
              "name": "main-fw"
            },
            "version": "1.0.0"
          },
          "cohort": {
            "id": 1,
            "name": "Beta Channel",
            "slug": "beta"
          },
          "deployer": {
            "id": 1,
            "email": "user@example.com",
            "name": "Robert S"
          },
          "extra_info": {
            "anything": "you_want",
            "ci_system": "Jenkins"
          }
        }
      }

      ```
paths:
  /auth/me:
    get:
      tags:
        - Auth
      summary: Me
      description: Return information about the logged in **User**
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '286'
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Wed, 22 May 2019 04:39:19 GMT
          content:
            application/json:
              schema:
                type: object
              example:
                created_date: '2019-05-22T04:33:21.472212+00:00'
                email: john@memfault.com
                id: 1
                name: John
                organizations:
                  - id: 1
                    name: Acme, Inc.
                    slug: acme-inc
                updated_date: '2019-05-22T04:33:21.483559+00:00'
  /auth/api_key:
    post:
      tags:
        - Auth
      summary: Generate User API Key
      description: >-
        Generate (or re-generate) an API Key for logged in **User**.


        To generate this without logging into Memfault, you may use HTTP Basic
        Auth to call this API.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '""'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '70'
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Wed, 22 May 2019 04:40:00 GMT
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  api_key: dbdd9aa9f9e148b5bc1a1cc828bb1d95
    get:
      tags:
        - Auth
      summary: Get User API Key
      description: Get a previously generated API Key for the logged in **User**
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '70'
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Wed, 22 May 2019 04:40:09 GMT
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  api_key: dbdd9aa9f9e148b5bc1a1cc828bb1d95
    delete:
      tags:
        - Auth
      summary: Reset User API key
      description: >-
        Invalidate the previously generated API Key for the logged in **User**
        and do not create another one
      responses:
        '204':
          description: NO CONTENT
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Wed, 22 May 2019 04:40:20 GMT
          content:
            application/json:
              schema:
                type: object
              example: {}
  /api/v0/organizations/{organization_slug}/projects:
    post:
      tags:
        - Projects
      summary: Create a Project
      description: |-
        Create a **Project** under the given **Organization**

        NOTE: Requires `admin` permission on the **Organization**

        <hr>

        #### Return Value

        Returns a **Project** Schema
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '""'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: gunicorn/19.9.0
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 21:08:54 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '257'
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=60
            Vary:
              schema:
                type: string
                example: Cookie
            Via:
              schema:
                type: string
                example: 1.1 vegur
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  api_key: b8e7e2c93e944440b4245e78c9b3e082
                  created_date: '2019-05-21T21:08:54.323530+00:00'
                  id: 13
                  name: Smart Sink
                  os: FreeRTOS
                  platform: nRF52
                  slug: smart-sink
                  updated_date: '2019-05-21T21:08:54.396858+00:00'
    get:
      tags:
        - Projects
      summary: List Projects
      description: |-
        List the **Projects** under a given **Organization**

        <hr>

        #### Return Value

        Returns a list of **Project** Schemas
      parameters:
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: gunicorn/19.9.0
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 21:09:05 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '340'
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=60
            Vary:
              schema:
                type: string
                example: Cookie
            Via:
              schema:
                type: string
                example: 1.1 vegur
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - api_key: b8e7e2c93e944440b4245e78c9b3e082
                    created_date: '2019-05-21T21:08:54.323530+00:00'
                    id: 13
                    name: Smart Sink
                    os: FreeRTOS
                    platform: nRF52
                    slug: smart-sink
                    updated_date: '2019-05-21T21:08:54.396858+00:00'
                paging:
                  item_count: 1
                  page: 1
                  page_count: 1
                  per_page: 100
                  total_count: 1
  /api/v0/organizations/{organization_slug}/projects/{project_slug}:
    get:
      tags:
        - Projects
      summary: Retrieve Project
      description: |-
        Retrieve a **Project** under a given **Organization**

        <hr>

        #### Return Value

        Returns a **Project** Schema
      parameters:
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: gunicorn/19.9.0
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 21:09:15 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '257'
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=60
            Vary:
              schema:
                type: string
                example: Cookie
            Via:
              schema:
                type: string
                example: 1.1 vegur
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  api_key: b8e7e2c93e944440b4245e78c9b3e082
                  created_date: '2019-05-21T21:08:54.323530+00:00'
                  id: 13
                  name: Smart Sink
                  os: FreeRTOS
                  platform: nRF52
                  slug: smart-sink
                  updated_date: '2019-05-21T21:08:54.396858+00:00'
    patch:
      tags:
        - Projects
      summary: Update Project
      description: |-
        Update a **Project** under a given **Organization**

        NOTE: Requires `admin` permission on the **Organization**

        <hr>

        #### Return Value

        Returns a **Project** Schema
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '""'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: gunicorn/19.9.0
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 21:09:41 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '261'
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=60
            Vary:
              schema:
                type: string
                example: Cookie
            Via:
              schema:
                type: string
                example: 1.1 vegur
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  api_key: b8e7e2c93e944440b4245e78c9b3e082
                  created_date: '2019-05-21T21:08:54.323530+00:00'
                  id: 13
                  name: Smart Sink
                  os: FreeRTOS-AWS
                  platform: nRF52
                  slug: smart-sink
                  updated_date: '2019-05-21T21:09:41.486370+00:00'
    delete:
      tags:
        - Projects
      summary: Delete Project
      description: |-
        Delete a **Project** under a given **Organization**

        NOTE: Requires `admin` permission on the **Organization**

        <hr>

        #### Return Value

        Returns `204 - No Content`
      parameters:
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
      responses:
        '204':
          description: NO CONTENT
          headers:
            Content-Length:
              schema:
                type: integer
                example: '0'
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: gunicorn/19.9.0
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 21:10:31 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=60
            Vary:
              schema:
                type: string
                example: Cookie
            Via:
              schema:
                type: string
                example: 1.1 vegur
          content:
            application/json:
              schema:
                type: object
              example: {}
  /api/v0/organizations/{organization_slug}/projects/{project_slug}/api_key:
    get:
      tags:
        - Projects
      summary: Get Project Client Key
      description: |-
        Return the **Project** Client Key

        <hr>

        #### Return Value

        ```JSON
        {
          "api_key": "87c2ca9d3ec148ac82034fc2724ff614"
        }
        ```
      parameters:
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: gunicorn/19.9.0
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 21:10:07 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '56'
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=60
            Vary:
              schema:
                type: string
                example: Cookie
            Via:
              schema:
                type: string
                example: 1.1 vegur
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  api_key: b8e7e2c93e944440b4245e78c9b3e082
    post:
      tags:
        - Projects
      summary: Refresh Project Client Key
      description: >-
        Regenerate the **Project** Client Key


        NOTE: This will make all **Devices** that currently send data using the
        key **stop working**. Please, please please make sure this is what you
        want to do.


        <hr>


        #### Return Value


        ```JSON

        {
          "api_key": "87c2ca9d3ec148ac82034fc2724ff614"
        }

        ```
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '""'
      parameters:
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '70'
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 23:26:44 GMT
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  api_key: b13aa6db4cc54709957be890eb822221
  /api/v0/chunks/{device_serial}:
    post:
      tags:
        - Chunks
      summary: Upload Chunk
      description: >-
        Upload a _Chunk_ for a given **Device**.


        NOTE: _Chunks_ from a given device need to be posted sequentially, in
        the order  

        in which the Firmware SDK's packetizer created the chunks. When posting
        chunks  

        concurrently, ensure that requests for _the same device_ cannot happen  

        concurrently, to avoid violating the ordering requirement. Out of order
        chunks  

        will be best-effort reordered on the Memfault server.


        NOTE: This endpoint _requires_ that the sender use a custom HTTP header
        defining  

        the Memfault Project Client Key.


        `Memfault-Project-Key: 87c2ca9d3ec148ac82034fc2724ff614`


        #### Uploading a single chunk in one HTTP request


        Simply put the chunk data in the request body and set the  

        `Content-Type: application/octet-stream` header to indicate the request
        body  

        directly contains chunk data.


        ##### Using base64-encoded chunks


        When sending data as text encoded with base64, an additional header is
        required: `Content-Encoding: base64`


        #### Uploading multiple chunks in one HTTP request


        Because chunks must to be uploaded sequentially, the negative effect of
        the  

        network round-trip time on the overall throughput becomes undesirably
        large when  

        chunks are small. To counter this, it is possible to upload multiple
        chunks in a  

        single HTTP request.


        If chunks can be batched, it is recommended to upload multiple chunks in
        one  

        request.


        The `/chunks` endpoint accepts `Content-Type: multipart/mixed` requests,
        where  

        the request body contains multiple, ordered chunks, separated by a
        boundary  

        string. See
        [RFC-2046](https://tools.ietf.org/html/rfc2046#section-5.1.1) for  

        the syntactical details of forming a multipart body.


        For multipart requests, the following applies:


        - `Content-Type: multipart/mixed; boundary=...` must be used as the
        "root"  
            `Content-Type`.
        - The `boundary` header parameter is required.

        - Each part _requires_ a `Content-Length` header, set to the size of the
        part  
            (chunk) data.
        - It is recommended to omit the `Content-Type` header for the parts in
        a  
            multipart body for brevity (`application/octet-stream` is assumed). If set,  
            `application/octet-stream` is the only allowed value.
        - `Content-Type: multipart/form-data` is not supported. That said, the
        body  
            syntax is the same as for a `multipart/mixed` request. Some libraries and  
            programs that can form `multipart/form-data` requests, can be co-erced into  
            changing `multipart/form-data` to `multipart/mixed`.
        - It is not possible to upload multiple chunks from _different_ devices
        in a  
            single request. All chunks in a multipart request must originate from the  
            device that matches the `{{device_serial}}` part of the URL.
        - The order of the parts matches the order in which the chunks are
        produced by  
            the Memfault Firmware SDK.
            

        ##### Using base64-encoded chunks


        When sending data as text encoded with base64, an additional header is
        required: `Content-Encoding: base64`. This header is required within
        each part of the request.


        ##### Example multipart/mixed request:


        ``` text

        POST /api/v0/chunks/sn HTTP/1.1

        Host: chunks.memfault.com

        Memfault-Project-Key: <key here>

        Content-Length: <total length>

        Content-Type: multipart/mixed;
        boundary=77AC153B-FCD2-4224-A8F8-1788947663A0

        --77AC153B-FCD2-4224-A8F8-1788947663A0

        Content-Length: <chunk 1 data length>

        <chunk 1 data>

        --77AC153B-FCD2-4224-A8F8-1788947663A0

        Content-Length: <chunk 2 data length>

        <chunk 2 data>

        --77AC153B-FCD2-4224-A8F8-1788947663A0--

         ```

        ---


        #### Return Value


        - A `202 Accepted` response if the chunk was accepted and enqueued for
        further  
            processing.
        - A `400 Bad Request` response:
            - if the `Host` header was missing, or,
            - if `Content-Type: multipart/mixed` was used without specifying the  
                `boundary` parameter.
        - A `403 Unauthorized` response if the `Memfault-Project-Key` header was
        missing  
            or not valid.
        - A `411 Length Required` response
            - if the request or any of its parts was missing the `Content-Length` header,  
                or,
            - the value of the `Content-Length` was invalid.
        - A `413 Payload Too Large` response if the chunk was invalid due to
        being too  
            large or too small. When using the Memfault Firmware SDK's packetizer this  
            should never happen in practice.
        - A `415 Unsupported Media Type` response:
            - if the request was missing a `Content-Type` header or the `Content-type`  
                was not one of `application/octet-stream` or `multipart/mixed`.
            - if `Content-Type: multipart/mixed` was used, one or more parts contained a  
                `Content-Type` header with a value other than `application/octet-stream`.
        - A `429 Too Many Requests` response if the device has sent too many
        requests or chunks (or both) in a period of time.
            - The response will have a `Retry-After` header that indicates the  
                minimum amount of time the client must wait before retrying the request.
        - A `503 Service Unavailable` response if the service is temporarily  
            unavailable. The response will have a `Retry-After` header that indicates the  
            minimum amount of time the client must wait before retrying the request.
      requestBody:
        content:
          text/plain: {}
      parameters:
        - name: Memfault-Project-Key
          in: header
          schema:
            type: string
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/octet-stream
        - name: device_serial
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v0/organizations/{organization_slug}/projects/{project_slug}/cohorts:
    post:
      tags:
        - Cohorts
      summary: Create a Cohort
      description: |-
        Create a **Cohort** for the given **Project**

        <hr>

        #### Return Value

        Returns a **Cohort** Schema
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '""'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '259'
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 21:55:34 GMT
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  count_devices: 0
                  created_date: '2019-05-21T21:55:34.349088+00:00'
                  id: 7
                  last_deployment: null
                  name: Internal Channel
                  slug: internal
                  updated_date: '2019-05-21T21:55:34.349106+00:00'
    get:
      tags:
        - Cohorts
      summary: List Cohorts
      description: |-
        List all **Cohorts** for the given **Project**

        <hr>

        #### Return Value

        Returns a list of **Cohort** Schemas
      parameters:
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '267'
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 21:57:59 GMT
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - count_devices: 0
                    created_date: '2019-05-21T21:26:48.477897+00:00'
                    id: 5
                    last_deployment: null
                    name: default
                    slug: default
                    updated_date: '2019-05-21T21:26:48.477903+00:00'
                  - count_devices: 0
                    created_date: '2019-05-21T21:55:34.349088+00:00'
                    id: 7
                    last_deployment: null
                    name: Internal Channel
                    slug: internal
                    updated_date: '2019-05-21T21:55:34.349106+00:00'
                paging:
                  item_count: 2
                  page: 1
                  page_count: 1
                  per_page: 100
                  total_count: 2
  /api/v0/organizations/{organization_slug}/projects/{project_slug}/cohorts/{cohort_slug}:
    get:
      tags:
        - Cohorts
      summary: Retrieve a Cohort
      description: |-
        Retrieve a single **Cohort**

        <hr>

        #### Return Value

        Returns a **Cohort** Schema
      parameters:
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
        - name: cohort_slug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '259'
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 21:58:05 GMT
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  count_devices: 0
                  created_date: '2019-05-21T21:55:34.349088+00:00'
                  id: 7
                  last_deployment: null
                  name: Internal Channel
                  slug: internal
                  updated_date: '2019-05-21T21:55:34.349106+00:00'
    patch:
      tags:
        - Cohorts
      summary: Update a Cohort
      description: |-
        Update a single **Cohort**

        <hr>

        #### Return Value

        Returns a **Cohort** Schema
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '""'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
        - name: cohort_slug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '257'
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 22:03:48 GMT
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  count_devices: 0
                  created_date: '2019-05-21T21:55:34.349088+00:00'
                  id: 7
                  last_deployment: null
                  name: Internal Group
                  slug: internal
                  updated_date: '2019-05-21T22:03:48.302371+00:00'
    delete:
      tags:
        - Cohorts
      summary: Delete a Cohort
      description: |-
        Delete a single **Cohort**

        <hr>

        #### Return Value

        Returns `204 - No Content`
      parameters:
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
        - name: cohort_slug
          in: path
          schema:
            type: string
          required: true
      responses:
        '204':
          description: NO CONTENT
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 23:30:43 GMT
          content:
            application/json:
              schema:
                type: object
              example: {}
  /api/v0/organizations/{organization_slug}/projects/{project_slug}/cohorts/{cohort_slug}/devices:
    get:
      tags:
        - Cohorts
      summary: List Devices in a Cohort
      description: |-
        List the **Devices** in the given **Cohort**

        <hr>

        #### Return Value

        Returns a list of **Device** Schemas
      parameters:
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
        - name: cohort_slug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '312'
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 22:15:18 GMT
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - cohort:
                      count_devices: 1
                      id: 7
                      name: Internal Group
                      slug: internal
                    created_date: '2019-05-21T22:08:17.289061+00:00'
                    device_serial: ABCD1234
                    hardware_version: evt
                    id: 35
                    last_seen: null
                    last_seen_release: null
                    latest_install: null
                    latest_trace: null
                    owner_ref: user1234
                    updated_date: '2019-05-21T22:11:55.900182+00:00'
                paging:
                  item_count: 1
                  page: 1
                  page_count: 1
                  per_page: 100
                  total_count: 1
    patch:
      tags:
        - Cohorts
      summary: Move Devices to a Cohort
      description: |-
        Move **Devices** to the given **Cohort**

        NOTE: This will remove the **Devices** from their previous **Cohort**.

        <hr>

        #### Return Value

        Returns `204 - No Content`
      requestBody:
        content: {}
      parameters:
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
        - name: cohort_slug
          in: path
          schema:
            type: string
          required: true
      responses:
        '204':
          description: NO CONTENT
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 22:15:58 GMT
          content:
            application/json:
              schema:
                type: object
              example: {}
  /api/v0/organizations/{organization_slug}/projects/{project_slug}/devices:
    post:
      tags:
        - Devices
      summary: Create Devices
      description: >-
        Create a single **Device** or a list of **Devices** for a given
        **Project**


        NOTE: A **Device** *does not* need to be manually created using this
        endpoint. If Memfault receives any **Events** from an unknown
        **Device**, it will *create* one with the appropriate information.


        <hr>


        #### Return Value (Single)


        Returns a **Device** Schema


        #### Return Value (Multiple)


        A `202 Accepted` response and `Location` header for which to check the
        status of the *Task*.


        ```

        Location:
        https://api.memfault.com/api/v0/queue/bb992299-f64a-4d47-8372-7e16aff9fdc3

        ```
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '""'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '472'
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 22:08:17 GMT
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  id: 1
                  created_date: '2019-01-19T05:01:13.000000+00:00'
                  updated_date: '2019-01-19T05:01:13.000000+00:00'
                  device_serial: INTERNAL-1234
                  hardware_version:
                    name: evt
                  nickname: ''
                  description: Kitchen Smart Sink
                  first_seen: '2019-01-19T05:01:13.000000+00:00'
                  last_seen: '2019-01-19T05:01:13.000000+00:00'
                  cohort:
                    id: 1
                    name: Internal Group
                    slug: internal
                  last_seen_software_version:
                    archived: false
                    id: 37
                    software_type:
                      id: 18
                      name: xx_evt-software
                    version: 1.0.1
        '202':
          description: ACCEPTED
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '3'
            Location:
              schema:
                type: string
                example: >-
                  http://127.0.0.1:5000/api/v0/queue/4889ff09-81cc-4f73-b568-108ac6e395aa
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 22:09:41 GMT
          content:
            application/json:
              schema:
                type: object
              example: {}
    get:
      tags:
        - Devices
      summary: List Devices
      description: |-
        List all **Devices** for a given **Project**

        <hr>

        #### Return Value

        Returns a list of **Device** Schemas
      parameters:
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '304'
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 22:11:10 GMT
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - id: 1
                    created_date: '2019-01-19T05:01:13.000000+00:00'
                    updated_date: '2019-01-19T05:01:13.000000+00:00'
                    device_serial: INTERNAL-1234
                    hardware_version:
                      name: evt
                    nickname: ''
                    first_seen: '2019-01-19T05:01:13.000000+00:00'
                    last_seen: '2019-01-19T05:01:13.000000+00:00'
                    cohort:
                      id: 1
                      name: Internal Group
                      slug: internal
                    last_seen_software_version:
                      archived: false
                      id: 37
                      software_type:
                        id: 18
                        name: xx_evt-software
                      version: 1.0.1
                paging:
                  item_count: 1
                  page: 1
                  page_count: 1
                  per_page: 100
                  total_count: 1
  /api/v0/organizations/{organization_slug}/projects/{project_slug}/devices/{device_serial}:
    get:
      tags:
        - Devices
      summary: Retrieve a Device
      description: |-
        Retrieve a single **Device**

        <hr>

        #### Return Value

        Returns a **Device** Schema
      parameters:
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
        - name: device_serial
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '480'
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 22:14:57 GMT
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  id: 1
                  created_date: '2019-01-19T05:01:13.000000+00:00'
                  updated_date: '2019-01-19T05:01:13.000000+00:00'
                  device_serial: INTERNAL-1234
                  hardware_version:
                    name: evt
                  nickname: ''
                  description: Kitchen Smart Sink
                  first_seen: '2019-01-19T05:01:13.000000+00:00'
                  last_seen: '2019-01-19T05:01:13.000000+00:00'
                  cohort:
                    id: 1
                    name: Internal Group
                    slug: internal
                  last_seen_software_version:
                    archived: false
                    id: 37
                    software_type:
                      id: 18
                      name: xx_evt-software
                    version: 1.0.1
    patch:
      tags:
        - Devices
      summary: Update a Device
      description: |-
        Update a single **Device**

        <hr>

        #### Return Value

        Returns a **Device** Schema
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '""'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
        - name: device_serial
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '480'
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 22:11:55 GMT
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  id: 1
                  created_date: '2019-01-19T05:01:13.000000+00:00'
                  updated_date: '2019-01-19T05:01:13.000000+00:00'
                  device_serial: INTERNAL-1234
                  hardware_version:
                    name: evt
                  nickname: user1234
                  description: Kitchen Smart Sink
                  first_seen: '2019-01-19T05:01:13.000000+00:00'
                  last_seen: '2019-01-19T05:01:13.000000+00:00'
                  cohort:
                    id: 1
                    name: Internal Group
                    slug: internal
                  last_seen_software_version:
                    archived: false
                    id: 37
                    software_type:
                      id: 18
                      name: xx_evt-software
                    version: 1.0.1
    delete:
      tags:
        - Devices
      summary: Delete a Device
      description: |-
        Delete a single **Device**

        <hr>

        #### Return Value

        Returns `204 - No Content`
      parameters:
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
        - name: device_serial
          in: path
          schema:
            type: string
          required: true
      responses:
        '204':
          description: NO CONTENT
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 22:10:56 GMT
          content:
            application/json:
              schema:
                type: object
              example: {}
  /api/v0/organizations/{organization_slug}/projects/{project_slug}/software_types:
    post:
      tags:
        - Software Types
      summary: Create Software Type
      description: >-
        Create a **Software Type** for a given **Project**


        NOTE: A **Device** *does not* need to be manually created using this
        endpoint. If Memfault receives any **Events** from an unknown
        **Device**, it will *create* one with the appropriate information.


        <hr>


        #### Return Value


        Returns a **Software Type** Schema
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '""'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '472'
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 22:08:17 GMT
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  created_date: '1989-05-30T10:40:12+00:00'
                  id: 1
                  latest_software_version: 'null'
                  name: main-fw
                  software_versions_count: 0
    get:
      tags:
        - Software Types
      summary: List Software Types
      description: |-
        List all **Software Types** for a given **Project**

        <hr>

        #### Return Value

        Returns a list of **Software Type** Schemas
      parameters:
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '304'
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 22:11:10 GMT
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - created_date: '1989-05-30T10:40:12+00:00'
                    id: 1
                    latest_software_version: 'null'
                    name: main-fw
                    software_versions_count: 0
                  - created_date: '1989-05-30T10:40:12+00:00'
                    id: 2
                    latest_software_version: 'null'
                    name: wifi-fw
                    software_versions_count: 0
                paging:
                  item_count: 2
                  page: 1
                  page_count: 1
                  per_page: 100
                  total_count: 2
  /api/v0/organizations/{organization_slug}/projects/{project_slug}/software_types/{_software_type_name}:
    get:
      tags:
        - Software Types
      summary: Retrieve a Software Type
      description: |-
        Retrieve a single **Software Type**

        <hr>

        #### Return Value

        Returns a **Software Type** Schema
      parameters:
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
        - name: _software_type_name
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '480'
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 22:14:57 GMT
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  created_date: '1989-05-30T10:40:12+00:00'
                  id: 1
                  latest_software_version: 'null'
                  name: main-fw
                  software_versions_count: 0
  /api/v0/organizations/{organization_slug}/projects/{project_slug}/software_types/{software_type}/software_versions:
    post:
      tags:
        - Software Versions
      summary: Create Software Version
      description: >-
        Create a **Software Version** for a given **Software Type** and
        **Project**


        NOTE: A **Software Version** *does not* need to be manually created
        using this endpoint. If Memfault receives any **Events** or **Software
        Artifacts** from an unknown **Software Version**, it will *create* one
        with the appropriate information.




        <hr>


        #### Return Value


        Returns a **Software Version** Schema
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '""'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
        - name: software_type
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '472'
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 22:08:17 GMT
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  artifacts: []
                  build_id: ddc0eb14f4ae541123436a2068aaea06aff2c523
                  created_date: '1989-05-30T10:40:12+00:00'
                  id: 1
                  min_version: ''
                  updated_date: '1989-05-30T10:40:12+00:00'
                  version: 1.0.0
    get:
      tags:
        - Software Versions
      summary: Retrieve a Versions
      description: >-
        Retrieve a **Software Version** for a given **Software Type** and
        **Project**


        <hr>


        #### Return Value


        Returns a **Software Version** Schema
      parameters:
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
        - name: software_type
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '304'
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 22:11:10 GMT
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  artifacts: []
                  build_id: ddc0eb14f4ae541123436a2068aaea06aff2c523
                  created_date: '1989-05-30T10:40:12+00:00'
                  id: 1
                  min_version: ''
                  updated_date: '1989-05-30T10:40:12+00:00'
                  version: 1.0.0
  /api/v0/organizations/{organization_slug}/projects/{project_slug}/symbols:
    post:
      tags:
        - Releases
      summary: Upload Release Artifacts
      description: >-
        Process **Release Artifact** for a given **Project** after it has been
        uploaded using

        [`/api/v0/upload`](#2d08c7d6-fc5e-4fc7-ac77-9d72e58ba7aa).


        > Note: A Release is created automatically based on the passed metadata.
        In other words, there is no need to first create a Release before
        uploading a Release Artifact.


        <hr>


        #### Request Schema


        ```JSON

        {
          "file": {
            "token": "<opaque token identifying the uploaded file>"
          },
          "software_version": {
            "version": "1.0.0",
            "software_type": "main-firmware",
            "revision": "g31cffde2b3",
          },
          "must_pass_through": false,
          "hardware_version": "hwrev1",
          "notes": "Fixed a bug in the WiFi driver",
        }

        ```


        #### Return Value


        A `202 Accepted` response and `Location` header for which to check the
        status of

        the _Task_.


        ```

        Location:
        https://api.memfault.com/api/v0/queue/bb992299-f64a-4d47-8372-7e16aff9fdc3

        ```
      requestBody:
        content: {}
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v0/organizations/{organization_slug}/projects/{project_slug}/symbols-by-gnu-build-id/{gnu_build_id}:
    get:
      tags:
        - Symbol Files
      summary: Get Symbol File by GNU Build ID
      description: >-
        Download a previously uploaded ELF **Symbol File** given its GNU Build
        ID.


        To check the GNU Build ID of an ELF **Symbol File**, you can use the

        `readelf -n /path/to/binary` command from the

        [binutils](https://www.gnu.org/software/binutils/) project. It is
        usually

        bundled with your compiler toolchain. Read our

        [article about GNU Build
        IDs](https://interrupt.memfault.com/blog/gnu-build-id-for-firmware)

        to learn more.


        > TIP: by using the HTTP `HEAD` method instead of `GET` one can check
        for

        > existence without actually downloading the file to save time and
        network

        > bandwidth. If a HTTP 404 status is returned, the symbol file does not
        exist.
      parameters:
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
        - name: gnu_build_id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v0/organizations/{organization_slug}/projects/{project_slug}/symbols-by-qcomm-adk-build-id/{subsystem_id}/{processor_id}/{build_id_number}:
    get:
      tags:
        - Symbol Files
      summary: Get Symbol File by Qualcomm ADK Build ID Number
      description: >-
        Download a previously uploaded Qualcomm ADK ELF **Symbol File** given
        its subsystem ID, processor ID and Build ID Number.


        | **Subsystem Name** | **ID** |

        | --- | --- |

        | Curator | 0 |

        | Host | 1 |

        | Bluetooth | 2 |

        | Audio | 3 |

        | Apps | 4 |


        > TIP: by using the HTTP `HEAD` method instead of `GET` one can check
        for  

        > existence without actually downloading the file to save time and
        network  

        > bandwidth. If a HTTP 404 status is returned, the symbol file does not
        exist.
      parameters:
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
        - name: subsystem_id
          in: path
          schema:
            type: string
          required: true
        - name: processor_id
          in: path
          schema:
            type: string
          required: true
        - name: build_id_number
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v0/upload/trace-import:
    post:
      tags:
        - Trace Import
      summary: Upload Trace
      description: >-
        Import a new **Trace** for a given **Project**.


        NOTE: This endpoint _requires_ that the sender use a custom HTTP header
        defining the Memfault Project Client Key.


        `Memfault-Project-Key: 87c2ca9d3ec148ac82034fc2724ff614`


        ---


        ### Request Body Structure


        The structure of the JSON request body is documented below using a
        TypeScript-like syntax: optional fields are annotated with a `?`. The
        pipe (`|`) symbol is used to denote a union of types. For example,
        `string | integer` means that a field may contain a string or an integer
        number. An object key enclosed in square brackets like `[some key]`
        means that the key name itself is user-specified.


        Fields that can contain large numbers (i.e. 64-bit addresses, offsets or
        sizes) are of type `string | integer`. It is recommended to include
        numbers-as-strings (for example `"0x12345678ABCDEFFF"`), because
        JSON/JavaScript's number type can only contain integers up to 2^53.


        ``` typescript

        {
          // Date the device captured the trace, formatted as a ISO 8601 string.
          captured_date: string
          // The traits of the device.
          // See https://mflt.io/version-nomenclature for guidance and validation rules.
          device: {
            device_serial: string
            hardware_version: string
            software_type: string
            software_version: string
          }
          // Additional information that may be useful for debugging.
          message?: string
          // Represents a process in the system.
          processes: {
            // Name of process (com.google.android.keyboard, /bin/sensor-service, etc.)
            name?: string
            // Process ID
            pid?: integer
            // Represents a thread in a process.
            // 
            // In case of an RTOS system, this data structure is used to represent a task in the RTOS. Likewise, a thread from the
            // interrupt context can also be represented using this structure.
            threads: {
              // CPU ID
              cpu?: integer
              // True if this thread crashed
              crashed?: boolean
              // True if this is the currently running thread
              current?: boolean
              // Name of thread (main, etc)
              name?: string
              // RTOS specific priority number of thread
              priority?: integer
              // Represents a register in a thread of execution.
              registers: {
                // Hex string of raw bytes in the register.
                // 
                // The width of the register can be derived from the length of this string.
                data?: string
                // Name of the register, i.e. "r0
                name: string
                // Type of the register, either "int" or "float".
                type?: string
                // Human readable string of the value, i.e. "1.56" for a floating point register or for a PC register it may contain
                // "0x4008ffcc <invoke_abort+24>".
                value?: string
              }[]
              // True if this thread is the one that reported the trace
              reporting?: boolean
              // End address of the stack
              stack_end?: string | integer
              // Current stack pointer (for example, the value of the SP register on ARM chips)
              stack_pointer?: string | integer
              // Size of stack in bytes
              stack_size?: integer
              // Start address of the the stack
              stack_start?: string | integer
              // A lot of RTOS environments scribble a pattern on the stack so it's
              // easy to track a high water mark (i.e https://www.freertos.org/uxTaskGetStackHighWaterMark.html)
              // When populated, this is the amount of remaining space unused on the stack
              stack_unused?: integer
              // A single frame in a stacktrace
              stacktrace: {
                // Address of the program counter (PC) or equivalent
                address?: string | integer
                // Dictionary of the arguments passed to the function
                arguments: {
                  [argument name]: string | integer
                }
                // Column number, if relevant
                colno?: integer
                // File of the line of code
                file?: string
                // Address pointing to the start of the frame on the stack
                frame_pointer?: string | integer
                // Size of frame in bytes
                frame_size?: integer
                // Frame type
                frame_type?: "arch" | "dummy" | "inline" | "normal" | "sentinel" | "sigtramp" | "tailcall"
                // Function name
                function?: string
                // Offset in bytes from the beginning of the function,
                // such that function_start_address + frame.function_offset == frame.address
                function_offset?: integer
                // 0-n index of the frame in the stacktrace
                index: integer
                // Line number
                lineno?: integer
                // Dictionary of local variables in the context of this frame
                locals: {
                  [local variable name]: string | integer
                }
                // Optional GNU build id of the mapped executable file.
                // Given the example line with "map_name", it would be "efee95d4bd2f48dd9784bf14ab211afa37fc59ce".
                map_build_id?: string
                // True if the frame maps to a binary file.
                map_is_file?: boolean
                // Name of the memory mapping this frame maps to. This is usually the name of the executable or shared object,
                // but not always! See map_is_file.
                // 
                // Tombstone line example:
                // native: #00 pc 000000000006e994 /system/lib64/libc.so (offset 6e000) (__epoll_pwait+8) (BuildId: efee95d4bd2f48dd9784bf14ab211afa37fc59ce)
                map_name?: string
                // Optional memory mapping offset in bytes. Given the example line with "map_name", it would be 0x6e000.
                // Also known as the "load bias".
                map_offset?: string | integer
                // Module, com.package.memfault... or libmemfault.so
                module?: string
                // Java, Native, Kernel, System, etc.
                module_kind?: string
                // If this exists, it will override every other field that isn't required
                text?: string
              }[]
              // True if frames are missing due to uncaptured stack memory
              stacktrace_incomplete?: boolean
              // State of the thread.
              // Common values: "running", "ready", "blocked", "suspended", "terminated", "starting", "active interrupt,
              // "fault handler" or "unknown".
              state?: string //default: unknown
              // Thread ID
              tid?: integer
            }[]
          }[]
          // Reason code (https://mflt.io/reset-reason-codes) or string reason.
          reason: integer | string
          // If title is not provided, it will be generated based on the reason and top frame of the stack trace.
          title?: string
          trace_attributes: {
            string_key: string
            value: string | boolean | integer | float
          }[]
        }

         ```

        ### Example Request Body


        ``` json

        {
          "captured_date": "1989-05-30T10:40:12+00:00",
          "title": "Test Title",
          "message": "Test Message",
          "device": {
            "device_serial": "AU1328OP2",
            "hardware_version": "evt4",
            "software_type": "main",
            "software_version": "1.0.0"
          },
          "processes": [
            {
              "name": "/bin/sensor-service",
              "pid": 123,
              "threads": [
                {
                  "crashed": false,
                  "current": true,
                  "name": "CLI",
                  "registers": [
                    {
                      "data": "01000000",
                      "name": "r0",
                      "type": "long",
                      "value": "1"
                    },
                    {
                      "data": "ffffff7f",
                      "name": "r1",
                      "type": "long",
                      "value": "2147483647"
                    },
                    {
                      "data": "00000000",
                      "name": "r2",
                      "type": "long",
                      "value": "0"
                    },
                    {
                      "data": "fecaad0b",
                      "name": "r3",
                      "type": "long",
                      "value": "195939070"
                    },
                    {
                      "data": "c98a0200",
                      "name": "r4",
                      "type": "long",
                      "value": "166601"
                    },
                    {
                      "data": "02000000",
                      "name": "r5",
                      "type": "long",
                      "value": "2"
                    },
                    {
                      "data": "00000000",
                      "name": "r6",
                      "type": "long",
                      "value": "0"
                    },
                    {
                      "data": "01000000",
                      "name": "r7",
                      "type": "long",
                      "value": "1"
                    },
                    {
                      "data": "34ee0600",
                      "name": "r8",
                      "type": "long",
                      "value": "454196"
                    },
                    {
                      "data": "05000000",
                      "name": "r9",
                      "type": "long",
                      "value": "5"
                    },
                    {
                      "data": "e8be0600",
                      "name": "r10",
                      "type": "long",
                      "value": "442088"
                    },
                    {
                      "data": "5c9e0020",
                      "name": "r11",
                      "type": "long",
                      "value": "536911452"
                    },
                    {
                      "data": "cccccc0c",
                      "name": "r12",
                      "type": "long",
                      "value": "214748364"
                    },
                    {
                      "data": "e09d0020",
                      "name": "sp",
                      "type": "void *",
                      "value": "0x20009de0 <ucHeap+4352>"
                    },
                    {
                      "data": "43c70200",
                      "name": "lr",
                      "type": "long",
                      "value": "182083"
                    },
                    {
                      "data": "fecaad0b",
                      "name": "pc",
                      "type": "void (*)()",
                      "value": "0xbadcafe"
                    },
                    {
                      "data": "00000060",
                      "name": "xpsr",
                      "type": "long",
                      "value": "1610612736"
                    },
                    {
                      "data": "00000000",
                      "name": "fpscr",
                      "type": "long",
                      "value": "0"
                    },
                    {
                      "data": "00000000",
                      "name": "msp",
                      "type": "void *",
                      "value": "0x0"
                    },
                    {
                      "data": "00000000",
                      "name": "psp",
                      "type": "void *",
                      "value": "0x0"
                    },
                    {
                      "data": "00000000",
                      "name": "primask",
                      "type": "long",
                      "value": "0"
                    },
                    {
                      "data": "00000000",
                      "name": "control",
                      "type": "long",
                      "value": "0"
                    }
                  ],
                  "reporting": false,
                  "stack_start": "0x20008ec8",
                  "stack_unused": 3520,
                  "stacktrace": [
                    {
                      "address": "0xbadcafe",
                      "frame_size": 0,
                      "frame_type": "normal",
                      "index": 0
                    },
                    {
                      "address": "0x2c742",
                      "arguments": {
                        "argc": "<optimized out>",
                        "argv": "<optimized out>",
                        "p_cli": "<optimized out>"
                      },
                      "file": "src/cli.c",
                      "frame_size": 24,
                      "frame_type": "normal",
                      "function": "prv_crash_example",
                      "index": 1,
                      "lineno": 131,
                      "locals": {
                        "bad_func_call": "0xbadcafe",
                        "crash_type": "<optimized out>"
                      }
                    },
                    {
                      "address": "0x28ac8",
                      "arguments": {
                        "p_cli": "0x6bee8 <m_cli>"
                      },
                      "file": "../nrf5_sdk/components/libraries/cli/nrf_cli.c",
                      "frame_size": 0,
                      "frame_type": "inline",
                      "function": "cli_execute",
                      "index": 2,
                      "lineno": 2554,
                      "locals": {
                        "argc": "3",
                        "argv": "{0x200077a0 <m_cli_ctx+20> \"mflt\", 0x200077a5 <m_cli_ctx+25> \"crash\"}",
                        "cmd_handler_idx": "2",
                        "cmd_handler_lvl": "<optimized out>",
                        "cmd_idx": "<optimized out>",
                        "cmd_lvl": "<optimized out>",
                        "handler_cmd_lvl_0": "0x2c551 <prv_mflt_cli_cmds>",
                        "p_cmd": "0x0",
                        "p_cmd_low_level_entry": "0x6bf04 <m_mflt_cli_cmds>",
                        "p_static_entry": "<optimized out>",
                        "quote": "<optimized out>"
                      }
                    },
                    {
                      "address": "0x28ac8",
                      "arguments": {
                        "p_cli": "0x6bee8 <m_cli>"
                      },
                      "file": "../nrf5_sdk/components/libraries/cli/nrf_cli.c",
                      "frame_size": 0,
                      "frame_type": "inline",
                      "function": "cli_state_collect",
                      "index": 3,
                      "lineno": 1952,
                      "locals": {
                        "count": "1",
                        "data": "10 '\\n'"
                      }
                    },
                    {
                      "address": "0x28ac8",
                      "arguments": {
                        "p_cli": "0x6bee8 <m_cli>"
                      },
                      "file": "../nrf5_sdk/components/libraries/cli/nrf_cli.c",
                      "frame_size": 192,
                      "frame_type": "normal",
                      "function": "nrf_cli_process",
                      "index": 4,
                      "lineno": 2852,
                      "locals": {
                        "log_processed": "<optimized out>"
                      }
                    },
                    {
                      "address": "0x2c54a",
                      "file": "src/cli.c",
                      "frame_size": 0,
                      "frame_type": "tailcall",
                      "function": "mflt_cli_try_process",
                      "index": 5,
                      "lineno": 56
                    },
                    {
                      "address": "0x2d486",
                      "arguments": {
                        "ctx": "<optimized out>"
                      },
                      "file": "src/main_freertos.c",
                      "frame_size": 8,
                      "frame_type": "normal",
                      "function": "prv_mflt_cli_task",
                      "index": 6,
                      "lineno": 47
                    },
                    {
                      "address": "0x2d7d8",
                      "frame_type": "normal",
                      "function": "prvTaskExitError",
                      "index": 7
                    }
                  ],
                  "state": "running",
                  "tid": 2
                },
                {
                  "crashed": false,
                  "current": false,
                  "name": "IDL",
                  "registers": [
                    {
                      "data": "00000000",
                      "name": "r0",
                      "type": "long",
                      "value": "0"
                    },
                    {
                      "data": "01000000",
                      "name": "r1",
                      "type": "long",
                      "value": "1"
                    },
                    {
                      "data": "4e320000",
                      "name": "r2",
                      "type": "long",
                      "value": "12878"
                    },
                    {
                      "data": "00000000",
                      "name": "r3",
                      "type": "long",
                      "value": "0"
                    },
                    {
                      "data": "34cd0020",
                      "name": "r4",
                      "type": "long",
                      "value": "536923444"
                    },
                    {
                      "data": "30cd0020",
                      "name": "r5",
                      "type": "long",
                      "value": "536923440"
                    },
                    {
                      "data": "a8cd0020",
                      "name": "r6",
                      "type": "long",
                      "value": "536923560"
                    },
                    {
                      "data": "a5a5a5a5",
                      "name": "r7",
                      "type": "long",
                      "value": "-1515870811"
                    },
                    {
                      "data": "e8cc0020",
                      "name": "r8",
                      "type": "long",
                      "value": "536923368"
                    },
                    {
                      "data": "44cd0020",
                      "name": "r9",
                      "type": "long",
                      "value": "536923460"
                    },
                    {
                      "data": "00000010",
                      "name": "r10",
                      "type": "long",
                      "value": "268435456"
                    },
                    {
                      "data": "00ed00e0",
                      "name": "r11",
                      "type": "long",
                      "value": "-536810240"
                    },
                    {
                      "data": "a5a5a5a5",
                      "name": "r12",
                      "type": "long",
                      "value": "-1515870811"
                    },
                    {
                      "data": "d07a0020",
                      "name": "sp",
                      "type": "void *",
                      "value": "0x20007ad0 <s_idle_task_stack+192>"
                    },
                    {
                      "data": "ebeb0200",
                      "name": "lr",
                      "type": "long",
                      "value": "191467"
                    },
                    {
                      "data": "d0eb0200",
                      "name": "pc",
                      "type": "void (*)()",
                      "value": "0x2ebd0 <prvIdleTask+84>"
                    },
                    {
                      "data": "00000081",
                      "name": "xpsr",
                      "type": "long",
                      "value": "-2130706432"
                    },
                    {
                      "data": "00000000",
                      "name": "fpscr",
                      "type": "long",
                      "value": "0"
                    },
                    {
                      "data": "00000000",
                      "name": "msp",
                      "type": "void *",
                      "value": "0x0"
                    },
                    {
                      "data": "00000000",
                      "name": "psp",
                      "type": "void *",
                      "value": "0x0"
                    },
                    {
                      "data": "00000000",
                      "name": "primask",
                      "type": "long",
                      "value": "0"
                    },
                    {
                      "data": "00000000",
                      "name": "control",
                      "type": "long",
                      "value": "0"
                    }
                  ],
                  "reporting": false,
                  "stack_start": "0x20007a10",
                  "stack_unused": 76,
                  "stacktrace": [
                    {
                      "address": "0x2ebd0",
                      "arguments": {
                        "pvParameters": "<optimized out>"
                      },
                      "file": "../nrf5_sdk/external/freertos/source/tasks.c",
                      "frame_size": 40,
                      "frame_type": "normal",
                      "function": "prvIdleTask",
                      "index": 0,
                      "lineno": 3264
                    },
                    {
                      "address": "0x2d7d8",
                      "frame_type": "normal",
                      "function": "prvTaskExitError",
                      "index": 1
                    }
                  ],
                  "state": "ready",
                  "tid": 4
                }
              ]
            }
          ],
          "reason": "Assert",
          "trace_attributes": [
            {
              "string_key": "flash_ic_rev",
              "value": 2
            },
            {
              "string_key": "battery_level",
              "value": 84
            },
            {
              "string_key": "territory",
              "value": "US"
            }
          ]
        }

         ```

        ---


        #### Return Value


        A `202 Accepted` response and `Location` header for which to check the
        status of the _Task_.


        ```

        Location:
        https://api.memfault.com/api/v0/queue/bb992299-f64a-4d47-8372-7e16aff9fdc3

         ```
      requestBody:
        content: {}
      security:
        - noauthAuth: []
      parameters:
        - name: Memfault-Project-Key
          in: header
          schema:
            type: string
          example: 46ed623e7ecb4b11a80652e27882b663
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v0/events:
    post:
      tags:
        - Events
      summary: Upload Events
      description: >-
        Upload many **Events** for a given **Project**


        NOTE: This endpoint _requires_ that the sender use a custom HTTP header
        defining the Memfault Project Client Key.


        `Memfault-Project-Key: 87c2ca9d3ec148ac82034fc2724ff614`


        ---


        #### Return Value


        A `202 Accepted` response and `Location` header for which to check the
        status of the _Task_.


        ```

        Location:
        https://api.memfault.com/api/v0/queue/bb992299-f64a-4d47-8372-7e16aff9fdc3

         ```
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '""'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Memfault-Project-Key
          in: header
          schema:
            type: string
      responses:
        '202':
          description: ACCEPTED
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '3'
            Location:
              schema:
                type: string
                example: '{{SERVER}}/api/v0/queue/6958333f-9597-4b6b-bda9-b809d6b43d3a'
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 22:19:57 GMT
          content:
            application/json:
              schema:
                type: object
              example: {}
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '330'
            Location:
              schema:
                type: string
                example: '{{SERVER}}/api/v0/queue/6958333f-9597-4b6b-bda9-b809d6b43d3a'
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 22:19:57 GMT
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "error": {
                        "code": 1000,
                        "http_code": 400,
                        "message": {
                            "0": {
                                "event_info": {
                                    "metrics": {
                                        "uptime_s": {
                                            "value": [
                                                "Not a valid integer."
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "type": "InvalidUsageError"
                    }
                }
  /api/v0/organizations/{organization_slug}/projects/{project_slug}/issues:
    get:
      tags:
        - Issues
      summary: List Issues
      description: |-
        List all **Issues** for a given **Project**

        <hr>

        #### Return Value

        Returns a list of **Issue** Schemas
      parameters:
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '898'
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 22:42:11 GMT
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - counts:
                      - 10
                      - 11
                      - 15
                      - 10
                      - 10
                      - 11
                      - 12
                      - 6
                      - 5
                      - 15
                      - 11
                      - 10
                      - 13
                      - 12
                      - 15
                      - 5
                      - 4
                      - 10
                      - 7
                      - 5
                      - 4
                      - 11
                      - 15
                      - 14
                    created_date: '2019-05-21T22:32:58.168618+00:00'
                    device_count: 1
                    distribution:
                      hardware_version:
                        - count: 13
                          version: qq_pvt
                        - count: 9
                          version: xx_evt
                      sw_version:
                        - count: 13
                          version: '0.9'
                        - count: 7
                          version: 1.0.0
                        - count: 9
                          version: 1.0.1
                    first_release:
                      id: 8
                      revision: 1afd487207fe4a12aa4f77e1ecf1b978cc62d0b3
                      version: 1.0.0
                    first_seen: '2019-05-21T22:32:57.801998+00:00'
                    id: 11
                    last_release:
                      id: 8
                      revision: 1afd487207fe4a12aa4f77e1ecf1b978cc62d0b3
                      version: 1.0.0
                    last_seen: '2019-05-21T22:32:57.801998+00:00'
                    last_trace:
                      captured_date: '2019-05-21T22:32:57.801998+00:00'
                      context: ''
                      created_date: '2019-05-21T22:32:57.801961+00:00'
                      device:
                        device_serial: ABCD1234
                        hardware_version: evt
                        id: 35
                      entries:
                        threads:
                          - crashed: false
                            current: true
                            registers: []
                            reporting: false
                            stacktrace:
                              - address: 226689
                                context: []
                                file: >-
                                  /Users/chrisc/dev/memfault/sdk/embedded/src/memfault_ram_reboot_info_tracking.c
                                function: memfault_reboot_tracking_mark_crash
                                index: 0
                                lineno: 85
                              - address: 226574
                                context: []
                                file: >-
                                  /Users/chrisc/dev/memfault/sdk/embedded/src/memfault_fault_handling.c
                                function: memfault_reboot_tracking_assert_handler
                                index: 1
                                lineno: 171
                            state: unknown
                            tid: 1
                      id: 20
                      message: ''
                      reason: Assert
                      received_date: '2019-05-21T22:32:57.801994+00:00'
                      release:
                        id: 8
                        revision: 1afd487207fe4a12aa4f77e1ecf1b978cc62d0b3
                        version: 1.0.0
                      signature: >-
                        853ff579aabced352bc77dc85f481660545f78e2a27974e62a26b23b71ffe3a2
                      source_type: event
                      title: Assert at memfault_reboot_tracking_assert_handler
                    message: ''
                    resolution: null
                    signature: >-
                      853ff579aabced352bc77dc85f481660545f78e2a27974e62a26b23b71ffe3a2
                    status: open
                    title: Assert at memfault_reboot_tracking_assert_handler
                    trace_count: 1
                    updated_date: '2019-05-21T22:32:58.168622+00:00'
                paging:
                  item_count: 1
                  page: 1
                  page_count: 1
                  per_page: 100
                  total_count: 1
  /api/v0/organizations/{organization_slug}/projects/{project_slug}/issues/{issue_id}:
    get:
      tags:
        - Issues
      summary: Retrieve an Issue
      description: |-
        Retrieve a single **Issue**

        <hr>

        #### Return Value

        Returns an **Issue** Schema
      parameters:
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
        - name: issue_id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '844'
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 22:43:02 GMT
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  counts:
                    - 10
                    - 11
                    - 15
                    - 10
                    - 10
                    - 11
                    - 12
                    - 6
                    - 5
                    - 15
                    - 11
                    - 10
                    - 13
                    - 12
                    - 15
                    - 5
                    - 4
                    - 10
                    - 7
                    - 5
                    - 4
                    - 11
                    - 15
                    - 14
                  created_date: '2019-05-21T22:32:58.168618+00:00'
                  device_count: 1
                  distribution:
                    hardware_version:
                      - count: 13
                        version: qq_pvt
                      - count: 9
                        version: xx_evt
                    sw_version:
                      - count: 13
                        version: '0.9'
                      - count: 7
                        version: 1.0.0
                      - count: 9
                        version: 1.0.1
                  first_release:
                    id: 8
                    revision: 1afd487207fe4a12aa4f77e1ecf1b978cc62d0b3
                    version: 1.0.0
                  first_seen: '2019-05-21T22:32:57.801998+00:00'
                  id: 11
                  last_release:
                    id: 8
                    revision: 1afd487207fe4a12aa4f77e1ecf1b978cc62d0b3
                    version: 1.0.0
                  last_seen: '2019-05-21T22:32:57.801998+00:00'
                  last_trace:
                    captured_date: '2019-05-21T22:32:57.801998+00:00'
                    context: ''
                    created_date: '2019-05-21T22:32:57.801961+00:00'
                    device:
                      device_serial: ABCD1234
                      hardware_version: evt
                      id: 35
                    entries:
                      threads:
                        - crashed: false
                          current: true
                          registers: []
                          reporting: false
                          stacktrace:
                            - address: 226689
                              context: []
                              file: >-
                                /Users/chrisc/dev/memfault/sdk/embedded/src/memfault_ram_reboot_info_tracking.c
                              function: memfault_reboot_tracking_mark_crash
                              index: 0
                              lineno: 85
                            - address: 226574
                              context: []
                              file: >-
                                /Users/chrisc/dev/memfault/sdk/embedded/src/memfault_fault_handling.c
                              function: memfault_reboot_tracking_assert_handler
                              index: 1
                              lineno: 171
                          state: unknown
                          tid: 1
                    id: 20
                    message: ''
                    reason: Assert
                    received_date: '2019-05-21T22:32:57.801994+00:00'
                    release:
                      id: 8
                      revision: 1afd487207fe4a12aa4f77e1ecf1b978cc62d0b3
                      version: 1.0.0
                    signature: >-
                      853ff579aabced352bc77dc85f481660545f78e2a27974e62a26b23b71ffe3a2
                    source_type: event
                    title: Assert at memfault_reboot_tracking_assert_handler
                  message: ''
                  resolution: null
                  signature: >-
                    853ff579aabced352bc77dc85f481660545f78e2a27974e62a26b23b71ffe3a2
                  status: open
                  title: Assert at memfault_reboot_tracking_assert_handler
                  trace_count: 1
                  updated_date: '2019-05-21T22:32:58.168622+00:00'
    delete:
      tags:
        - Issues
      summary: Delete an Issue
      description: |-
        Delete a single **Issue**

        <hr>

        #### Return Value

        Returns `204 - No Content`
      parameters:
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
        - name: issue_id
          in: path
          schema:
            type: string
          required: true
      responses:
        '204':
          description: NO CONTENT
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 23:33:47 GMT
          content:
            application/json:
              schema:
                type: object
              example: {}
  /api/v0/organizations/{organization_slug}/projects/{project_slug}/issues/11:
    patch:
      tags:
        - Issues
      summary: Update an Issue
      description: |-
        Update a single **Issue**

        <hr>

        #### Return Value

        Returns a **Issue** Schema
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n\t\"status\": \"open\"\n}"'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '903'
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 22:44:36 GMT
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  counts:
                    - 10
                    - 11
                    - 15
                    - 10
                    - 10
                    - 11
                    - 12
                    - 6
                    - 5
                    - 15
                    - 11
                    - 10
                    - 13
                    - 12
                    - 15
                    - 5
                    - 4
                    - 10
                    - 7
                    - 5
                    - 4
                    - 11
                    - 15
                    - 14
                  created_date: '2019-05-21T22:32:58.168618+00:00'
                  device_count: 1
                  distribution:
                    hardware_version:
                      - count: 13
                        version: qq_pvt
                      - count: 9
                        version: xx_evt
                    sw_version:
                      - count: 13
                        version: '0.9'
                      - count: 7
                        version: 1.0.0
                      - count: 9
                        version: 1.0.1
                  first_release:
                    id: 8
                    revision: 1afd487207fe4a12aa4f77e1ecf1b978cc62d0b3
                    version: 1.0.0
                  first_seen: '2019-05-21T22:32:57.801998+00:00'
                  id: 11
                  last_release:
                    id: 8
                    revision: 1afd487207fe4a12aa4f77e1ecf1b978cc62d0b3
                    version: 1.0.0
                  last_seen: '2019-05-21T22:32:57.801998+00:00'
                  last_trace:
                    captured_date: '2019-05-21T22:32:57.801998+00:00'
                    context: ''
                    created_date: '2019-05-21T22:32:57.801961+00:00'
                    device:
                      device_serial: ABCD1234
                      hardware_version: evt
                      id: 35
                    entries:
                      threads:
                        - crashed: false
                          current: true
                          registers: []
                          reporting: false
                          stacktrace:
                            - address: 226689
                              context: []
                              file: >-
                                /Users/chrisc/dev/memfault/sdk/embedded/src/memfault_ram_reboot_info_tracking.c
                              function: memfault_reboot_tracking_mark_crash
                              index: 0
                              lineno: 85
                            - address: 226574
                              context: []
                              file: >-
                                /Users/chrisc/dev/memfault/sdk/embedded/src/memfault_fault_handling.c
                              function: memfault_reboot_tracking_assert_handler
                              index: 1
                              lineno: 171
                          state: unknown
                          tid: 1
                    id: 20
                    message: ''
                    reason: Assert
                    received_date: '2019-05-21T22:32:57.801994+00:00'
                    release:
                      id: 8
                      revision: 1afd487207fe4a12aa4f77e1ecf1b978cc62d0b3
                      version: 1.0.0
                    signature: >-
                      853ff579aabced352bc77dc85f481660545f78e2a27974e62a26b23b71ffe3a2
                    source_type: event
                    title: Assert at memfault_reboot_tracking_assert_handler
                  message: ''
                  resolution:
                    actor:
                      email: tyler@memfault.com
                      id: 1
                      name: John
                    timestamp: '2019-05-21T22:44:36.438341+00:00'
                  signature: >-
                    853ff579aabced352bc77dc85f481660545f78e2a27974e62a26b23b71ffe3a2
                  status: resolved
                  title: Assert at memfault_reboot_tracking_assert_handler
                  trace_count: 1
                  updated_date: '2019-05-21T22:44:36.439351+00:00'
  /api/v0/upload:
    post:
      tags:
        - Upload
      summary: Prepare Upload (using Project Key)
      description: >-
        "Prepares" a file upload.


        The response contains a signed `upload_url`, to which the file can be
        uploaded.


        The request to upload the file to `upload_url` should:

        - use the `PUT` HTTP method

        - use the file contents itself as the request body

        - set the `Content-Type: application/octet-stream` header.


        After the file has been uploaded, the `token` needs to be passed to the

        appropriate "Commit" API to trigger processing of the uploaded file. 


        For example, when uploading an Android Bugreport, the Bugreport API
        should be triggered using the token. See the respective sections for
        more information.


        NOTE: This endpoint _requires_ that the sender use a custom HTTP header
        defining

        the Memfault Project Client Key: `Memfault-Project-Key: <your project
        key>`.


        <hr>


        ### Request Schema


        | Field         | Type           |
        Description                               |

        |---------------|----------------|-------------------------------------------|

        | `kind` <br>   | `String`       | One of: COREDUMP, ANDROID_BUG_REPORT,
        MAR |

        | `device` <br> | `DeviceTraits` | Reference the _DeviceTraits Object_
        below |

        | `size`        | `String`       | Size of the file to upload in
        bytes       |


        #### DeviceTraits Object


        | Field                                | Type     |
        Description                                                                                     
        |

        |--------------------------------------|----------|--------------------------------------------------------------------------------------------------|

        | `software_type`  <br>**Required**    | `String` | The *name* of the
        **Software Type**  <br>Example: `"main-fw"`              |

        | `software_version`  <br>**Required** | `String` | The *version* of
        **Software Version**  <br>Example: `"1.0.0"`              |

        | `device_serial`  <br>**Required**    | `String` | **Device** Unique
        Identifier (set by client)  <br>Example: `"ABCD1234"` |

        | `hardware_version`  <br>**Required** | `String` | *Hardware Version*
        for the **Device**.  <br>Example:
        `"hwrev1"`                                  |


        #### Response Schema


        ```JSON

        {
          "data": {
            "upload_url": "https://url/to/put/file/to",
            "token": "<opaque token identifying the file to upload>"
          }
        }

        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                kind: <kind>
                device:
                  device_serial: <device_serial>
                  hardware_version: <hardware_version>
                  software_version: <software_version>
                  software_type: <software_type>
                size: 123456
      parameters:
        - name: Memfault-Project-Key
          in: header
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  token: >-
                    .eJwFwUsKgDAMQMG7dK2-NtZEzyIuUj-g4Afx_jgzmlThOx-e9z7W-TNBokgdrZZErxRDMu4shZTJG1HxwryhjhrDQJvolORN2a9QhTD95jMWDw.YtnBmA.KRGTDeMDpjrybBYTx4cvyjXM1Go
                  upload_url: >-
                    https://memfault-prod-east1.s3.amazonaws.com/tmp/project1/2022-07-21/86/b7/24/aa/db/14/4f/06/ab/cf/6a/67/99/31/56/1a.bin?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIA34IRT2Q3I63MVNPS%2F20220721%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20200721T211400Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b255326411a1e88a3350d5e5693f051b2e047ea9610b0fa7bf36619726a963b3
  /api/v0/organizations/<organization_slug>/projects/<project_slug>/upload:
    post:
      tags:
        - Upload
      summary: Prepare Upload (Basic Auth)
      description: >-
        This endpoint is the same as `/api/v0/upload`, except it uses basic

        authentication (using email & password or email & user API key) instead
        of the

        `Memfault-Project-Key` header.


        Please refer to the documentation for the request mentioned above.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                kind: <kind>
                device:
                  device_serial: <device_serial>
                  hardware_version: <hardware_version>
                  software_version: <software_version>
                  software_type: <software_type>
                size: 123456
      parameters:
        - name: Memfault-Project-Key
          in: header
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  token: >-
                    .eJwFwUsKgDAMQMG7dK2-NtZEzyIuUj-g4Afx_jgzmlThOx-e9z7W-TNBokgdrZZErxRDMu4shZTJG1HxwryhjhrDQJvolORN2a9QhTD95jMWDw.YtnBmA.KRGTDeMDpjrybBYTx4cvyjXM1Go
                  upload_url: >-
                    https://memfault-prod-east1.s3.amazonaws.com/tmp/project1/2022-07-21/86/b7/24/aa/db/14/4f/06/ab/cf/6a/67/99/31/56/1a.bin?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIA34IRT2Q3I63MVNPS%2F20220721%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20200721T211400Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=b255326411a1e88a3350d5e5693f051b2e047ea9610b0fa7bf36619726a963b3
  /api/v0/upload/coredump:
    post:
      tags:
        - Upload
      summary: Commit Coredump
      description: >-
        Process a _Coredump_ for a given **Project** after it has been uploaded
        using

        [`/api/v0/upload`](#2d08c7d6-fc5e-4fc7-ac77-9d72e58ba7aa). Upon
        successful processing, it will be converted into a

        **Trace**


        NOTE: This endpoint _requires_ that the sender use a custom HTTP header
        defining

        the Memfault Project Client Key: `Memfault-Project-Key: <your project
        key>`.


        <hr>


        #### Return Value


        A `202 Accepted` response and `Location` header for which to check the
        status of

        the _Task_.


        ```

        Location:
        https://api.memfault.com/api/v0/queue/bb992299-f64a-4d47-8372-7e16aff9fdc3

        ```
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n  \"file\": {\n    \"token\": \"<opaque token identifying
                the uploaded file>\"\n  }\n}"
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Memfault-Project-Key
          in: header
          schema:
            type: string
      responses:
        '202':
          description: ACCEPTED
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
  /api/v0/upload/bugreport:
    post:
      tags:
        - Upload
      summary: Commit Bugreport
      description: >-
        Process a _Bugreport_ for a given **Project** after it has been uploaded
        using

        (`/api/v0/upload`)(#2d08c7d6-fc5e-4fc7-ac77-9d72e58ba7aa). Upon
        successful processing, it will be converted into one or

        more **Traces**


        NOTE: This endpoint _requires_ that the sender use a custom HTTP header
        defining

        the Memfault Project Client Key: `Memfault-Project-Key: <your project
        key>`.


        Also see the [detailed, step-by-step guide on uploading Android
        Bugreports](https://mflt.io/34PvTBz).


        <hr>


        #### Return Value


        A `202 Accepted` response and `Location` header for which to check the
        status of

        the _Task_.


        ```

        Location:
        https://api.memfault.com/api/v0/queue/bb992299-f64a-4d47-8372-7e16aff9fdc3

        ```
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n  \"file\": {\n    \"token\": \"<opaque token identifying
                the uploaded file>\"\n  },\n  \"device_serial\":
                \"ABCD1234\",\n  \"hardware_version\": \"hwrev1\",\n 
                \"software_version\": \"1.0.0\",\n  \"software_type\":
                \"main-fw\"\n}"
      parameters:
        - name: Memfault-Project-Key
          in: header
          schema:
            type: string
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '202':
          description: ACCEPTED
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
  /api/v0/upload/mar:
    post:
      tags:
        - Upload
      summary: Commit MAR File
      description: >-
        Process a _MAR Archive_ for a given **Project** after it has been
        uploaded using

        (`/api/v0/upload`)(#2d08c7d6-fc5e-4fc7-ac77-9d72e58ba7aa).


        _MAR Archive_ files are typically uploaded by the [Bort
        SDK](https://docs.memfault.com/docs/android/android-bort). This API can
        be used if you need to upload _MAR Archives_ separately.  


        NOTE: This endpoint _requires_ that the sender use a custom HTTP header
        defining

        the Memfault Project Client Key: `Memfault-Project-Key: <your project
        key>`.


        <hr>


        #### Return Value


        A `202 Accepted` response and `Location` header for which to check the
        status of

        the _Task_.


        ```

        Location:
        https://api.memfault.com/api/v0/queue/bb992299-f64a-4d47-8372-7e16aff9fdc3

        ```
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n  \"file\": {\n    \"token\": \"<opaque token identifying
                the uploaded file>\"\n  },\n  \"device_serial\":
                \"ABCD1234\",\n  \"hardware_version\": \"hwrev1\",\n 
                \"software_version\": \"1.0.0\",\n  \"software_type\":
                \"main-fw\"\n}"
      parameters:
        - name: Memfault-Project-Key
          in: header
          schema:
            type: string
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '202':
          description: ACCEPTED
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
  /api/v0/upload/custom-data-recording:
    post:
      tags:
        - Upload
      summary: Commit Custom Data Recording
      description: >-
        Process a [Custom Data Recording
        (CDR)](https://mflt.io/custom-data-recordings) for a given **Project**
        after it has been uploaded using  

        (`/api/v0/upload`)(#2d08c7d6-fc5e-4fc7-ac77-9d72e58ba7aa).


        NOTES:


        - This endpoint _requires_ that the sender use a custom HTTP header
        defining  
            the Memfault Project Client Key: `Memfault-Project-Key:` .
        - Duration field is in seconds(s).
            

        ---


        #### Return Value


        A `202 Accepted` response and `Location` header for which to check the
        status of  

        the _Task_.


        ```

        Location:
        https://api.memfault.com/api/v0/queue/bb992299-f64a-4d47-8372-7e16aff9fdc3


        ```
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n  \"start_time\": \"2019-05-21T22:49:23.851983+00:00\",\n 
                \"duration\": 10,\n  \"mimetypes\": [\"application/json\",
                \"text/*\"],\n  \"reason\": \"Modem Disconnect\",\n  \"file\":
                {\n    \"token\": \"<opaque token identifying the uploaded
                file>\"\n  },\n  \"device_serial\": \"ABCD1234\",\n 
                \"hardware_version\": \"hwrev1\",\n  \"software_version\":
                \"1.0.0\",\n  \"software_type\": \"main-fw\"\n}"
      parameters:
        - name: Memfault-Project-Key
          in: header
          schema:
            type: string
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '202':
          description: ACCEPTED
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example: {}
  /api/v0/organizations/{organization_slug}/projects/{project_slug}/releases:
    post:
      tags:
        - Releases
      summary: Create a Release
      description: >-
        Create a **Release** for a given **Project**


        NOTE: A **Release** *does not* need to be manually created using this
        endpoint. If Memfault receives any **Events** from an unknown
        **Release**, it will *create* one with the appropriate information.


        <hr>


        #### Return Value


        - Returns a **Release** Schema

        - Returns a `Location` header with a URL for which to upload binaries
        and symbols to
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '""'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: gunicorn/19.9.0
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 21:15:08 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '271'
            Location:
              schema:
                type: string
                example: >-
                  https://staging.memfault.com/api/v0/organizations/acme-inc/projects/smart-sink/releases/1.0.0/artifacts
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=60
            Vary:
              schema:
                type: string
                example: Cookie
            Via:
              schema:
                type: string
                example: 1.1 vegur
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  artifacts: []
                  count_devices: 0
                  created_date: '2019-05-21T21:15:08.593624+00:00'
                  extra_info: null
                  id: 113
                  is_forced: false
                  min_version: ''
                  must_pass_through: false
                  notes: ''
                  revision: 1afd487207fe4a12aa4f77e1ecf1b978cc62d0b3
                  updated_date: '2019-05-21T21:15:08.596886+00:00'
                  version: 1.0.0
    get:
      tags:
        - Releases
      summary: List Releases
      description: |-
        List all **Releases** for a given **Project**

        <hr>

        #### Return Value

        Returns a list of **Release** Schemas
      parameters:
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: gunicorn/19.9.0
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 21:15:14 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '354'
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=60
            Vary:
              schema:
                type: string
                example: Cookie
            Via:
              schema:
                type: string
                example: 1.1 vegur
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - artifacts: []
                    count_devices: 0
                    created_date: '2019-05-21T21:15:08.593624+00:00'
                    extra_info: null
                    id: 113
                    is_forced: null
                    min_version: ''
                    must_pass_through: false
                    notes: ''
                    revision: 1afd487207fe4a12aa4f77e1ecf1b978cc62d0b3
                    updated_date: '2019-05-21T21:15:08.596886+00:00'
                    version: 1.0.0
                paging:
                  item_count: 1
                  page: 1
                  page_count: 1
                  per_page: 100
                  total_count: 1
  /api/v0/organizations/{organization_slug}/projects/{project_slug}/releases/{release_version}:
    get:
      tags:
        - Releases
      summary: Retrieve a Release
      description: |-
        Retrieve a single **Release**

        <hr>

        #### Return Value

        Returns a **Release** Schema
      parameters:
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
        - name: release_version
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Server:
              schema:
                type: string
                example: gunicorn/19.9.0
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 21:15:22 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '271'
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=60
            Vary:
              schema:
                type: string
                example: Cookie
            Via:
              schema:
                type: string
                example: 1.1 vegur
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  artifacts: []
                  count_devices: 0
                  created_date: '2019-05-21T21:15:08.593624+00:00'
                  extra_info: null
                  id: 113
                  is_forced: null
                  min_version: ''
                  notes: ''
                  revision: 1afd487207fe4a12aa4f77e1ecf1b978cc62d0b3
                  updated_date: '2019-05-21T21:15:08.596886+00:00'
                  version: 1.0.0
    patch:
      tags:
        - Releases
      summary: Update a Release
      description: |-
        Update a single **Release**

        <hr>

        #### Return Value

        Returns a **Release** Schema
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '""'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
        - name: release_version
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '346'
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 21:27:34 GMT
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  artifacts: []
                  count_devices: 0
                  created_date: '2019-05-21T21:26:55.207463+00:00'
                  extra_info: null
                  id: 7
                  is_forced: null
                  min_version: ''
                  must_pass_through: false
                  notes: ''
                  revision: 1afd487207fe4a12aa4f77e1ecf1b978cc62d0b3
                  updated_date: '2019-05-21T21:26:55.209415+00:00'
                  version: 1.0.0
    delete:
      tags:
        - Releases
      summary: Delete a Release
      description: |-
        Delete a single **Release**

        <hr>

        #### Return Value

        Returns `204 - No Content`
      parameters:
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
        - name: release_version
          in: path
          schema:
            type: string
          required: true
      responses:
        '204':
          description: NO CONTENT
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 21:28:32 GMT
          content:
            application/json:
              schema:
                type: object
              example: {}
  /api/v0/releases/latest:
    get:
      tags:
        - Releases
      summary: Retrieve Latest Release for a Device
      description: >-
        For a given **Device** (_Device Unique Identifier_ and _Hardware
        Version_) and _Software Type_, return the latest **Release** that should
        be installed.


        | Query Parameter | Type | Description |

        | --- | --- | --- |

        | `hardware_version`  <br>**Required** | `String` | Hardware Version of
        the **Device** |

        | `software_type`  <br>**Required** | `String` | Software Type being
        looked up **Device** |

        | `current_version`  <br>**Heavily Suggested** | `String` | The
        **Software Version** that the **Device** is currently running (used for
        hopping through versions) |

        | `device_serial`  <br>**Heavily Suggested** | `String` | The **Device**
        serial to identify a particular device (used for determining the
        **Cohort**) |


        NOTE: This endpoint _requires_ that the sender use a custom HTTP header
        defining the Memfault Project Client Key.


        `Memfault-Project-Key: 87c2ca9d3ec148ac82034fc2724ff614`


        ---


        Note: More details about version nomenclature can be found
        [here](https://mflt.io/34PyNGQ)


        ---


        #### Return Value


        - A `200 Ok` response with a **Release** Schema if a release update is
        found

        - A `204 No Content` if there is no new Release to install at this time.

        - A `400 Bad Request` if either the `hardware_version` or
        `software_type` provided do not exist.

        - A `403 Unauthorized` response if the `Memfault-Project-Key` header was
        missing  
            or not valid.
        - A `503 Service Unavailable` response if the service is temporarily  
            unavailable. The response will have a `Retry-After` header that indicates the  
            minimum amount of time to wait before retrying the request.
      parameters:
        - name: Memfault-Project-Key
          in: header
          schema:
            type: string
          example: 87c2ca9d3ec148ac82034fc2724ff614
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  artifacts:
                    - id: 1
                      created_date: '2019-01-19T05:01:13.000000+00:00'
                      updated_date: '2019-01-19T05:01:13.000000+00:00'
                      type: firmware
                      hardware_version: hwrev1
                      build_id: 8be26a9f3b9127bc898f34e05a30a9a2c706cf43
                      filename: firmware_1.0.0_hwrev1.bin
                      url: <direct_download_link>
                      md5: 54d0fdc208dfef97243c7eadce32797b
                  count_devices: 0
                  created_date: '2019-05-21T21:15:08.593624+00:00'
                  extra_info: null
                  id: 113
                  min_version: ''
                  must_pass_through: 'false'
                  notes: ''
                  revision: 1afd487207fe4a12aa4f77e1ecf1b978cc62d0b3
                  updated_date: '2019-05-21T21:15:08.596886+00:00'
                  version: 1.0.0
  /api/v0/organizations/{organization_slug}/projects/{project_slug}/deployments:
    post:
      tags:
        - Deployments (Preview)
      summary: Create a Deployment
      description: |-
        **Deploy** the given **Release** to the given **Cohort**

        <hr>

        #### Return Value

        Returns a **Deployment** Schema
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '""'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '323'
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 22:49:23 GMT
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  cohort:
                    count_devices: 1
                    id: 7
                    name: Internal Group
                    slug: internal
                  created_date: '2019-05-21T22:49:23.851977+00:00'
                  deployed_date: '2019-05-21T22:49:23.851977+00:00'
                  deployer:
                    email: tyler@memfault.com
                    id: 1
                    name: John
                  extra_info: null
                  id: 9
                  release:
                    id: 8
                    revision: 1afd487207fe4a12aa4f77e1ecf1b978cc62d0b3
                    version: 1.0.0
                  rollout_percent: 0
                  status: done
                  type: normal
                  updated_date: '2019-05-21T22:49:23.851983+00:00'
    get:
      tags:
        - Deployments (Preview)
      summary: List Deployments
      description: |-
        List all **Deployments** for the given **Project**

        <hr>

        #### Return Value

        Returns a list of **Deployment** Schemas
      parameters:
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '372'
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 22:49:32 GMT
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - cohort:
                      count_devices: 1
                      id: 7
                      name: Internal Group
                      slug: internal
                    created_date: '2019-05-21T22:49:23.851977+00:00'
                    deployed_date: '2019-05-21T22:49:23.851977+00:00'
                    deployer:
                      email: tyler@memfault.com
                      id: 1
                      name: John
                    extra_info: null
                    id: 9
                    release:
                      id: 8
                      revision: 1afd487207fe4a12aa4f77e1ecf1b978cc62d0b3
                      version: 1.0.0
                    rollout_percent: 0
                    status: done
                    type: normal
                    updated_date: '2019-05-21T22:49:23.851983+00:00'
                paging:
                  item_count: 1
                  page: 1
                  page_count: 1
                  per_page: 100
                  total_count: 1
  /api/v0/organizations/{organization_slug}/projects/{project_slug}/deployments/{deployment_id}:
    get:
      tags:
        - Deployments (Preview)
      summary: Retrieve a Deployment
      description: |-
        Retrieve a single **Deployment**

        <hr>

        #### Return Value

        Returns a **Deployment** Schema
      parameters:
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
        - name: deployment_id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '323'
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 22:49:45 GMT
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  cohort:
                    count_devices: 1
                    id: 7
                    name: Internal Group
                    slug: internal
                  created_date: '2019-05-21T22:49:23.851977+00:00'
                  deployed_date: '2019-05-21T22:49:23.851977+00:00'
                  deployer:
                    email: tyler@memfault.com
                    id: 1
                    name: John
                  extra_info: null
                  id: 9
                  release:
                    id: 8
                    revision: 1afd487207fe4a12aa4f77e1ecf1b978cc62d0b3
                    version: 1.0.0
                  rollout_percent: 0
                  status: done
                  type: normal
                  updated_date: '2019-05-21T22:49:23.851983+00:00'
    patch:
      tags:
        - Deployments (Preview)
      summary: Update a Deployment
      description: |-
        Update a single **Deployment**

        ---

        #### Return Value

        Returns a **Deployment** Schema
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '""'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: organization_slug
          in: path
          schema:
            type: string
          required: true
        - name: project_slug
          in: path
          schema:
            type: string
          required: true
        - name: deployment_id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: '336'
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Vary:
              schema:
                type: string
                example: Cookie
            Server:
              schema:
                type: string
                example: Werkzeug/0.15.2 Python/3.6.8
            Date:
              schema:
                type: string
                example: Tue, 21 May 2019 22:50:57 GMT
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  cohort:
                    count_devices: 1
                    id: 7
                    name: Internal Group
                    slug: internal
                  created_date: '2019-05-21T22:49:23.851977+00:00'
                  deployed_date: '2019-05-21T22:49:23.851977+00:00'
                  deployer:
                    email: tyler@memfault.com
                    id: 1
                    name: John
                  extra_info:
                    ci: jenkins
                  id: 9
                  release:
                    id: 8
                    revision: 1afd487207fe4a12aa4f77e1ecf1b978cc62d0b3
                    version: 1.0.0
                  rollout_percent: 0
                  status: done
                  type: normal
                  updated_date: '2019-05-21T22:50:57.591108+00:00'